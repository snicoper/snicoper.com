[
{
  "model": "blog.tag",
  "pk": 1,
  "fields": {
    "title": "Gnu/Linux",
    "slug": "gnulinux",
    "views": 737,
    "thumbnail": "articles/tags/gnu-linux.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 2,
  "fields": {
    "title": "Django",
    "slug": "django",
    "views": 765,
    "thumbnail": "articles/tags/python_django_b.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 3,
  "fields": {
    "title": "PostgreSQL",
    "slug": "postgresql",
    "views": 551,
    "thumbnail": "articles/tags/postgresql.png"
  }
},
{
  "model": "blog.tag",
  "pk": 4,
  "fields": {
    "title": "Sitio",
    "slug": "sitio",
    "views": 542,
    "thumbnail": "articles/tags/sitio.png"
  }
},
{
  "model": "blog.tag",
  "pk": 5,
  "fields": {
    "title": "Python",
    "slug": "python",
    "views": 437,
    "thumbnail": "articles/tags/python.png"
  }
},
{
  "model": "blog.tag",
  "pk": 6,
  "fields": {
    "title": "Nginx",
    "slug": "nginx",
    "views": 424,
    "thumbnail": "articles/tags/nginx.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 7,
  "fields": {
    "title": "Editores/Ides",
    "slug": "editoresides",
    "views": 369,
    "thumbnail": "articles/tags/vim.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 8,
  "fields": {
    "title": "Windows",
    "slug": "windows",
    "views": 329,
    "thumbnail": "articles/tags/windows.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 9,
  "fields": {
    "title": "MariaDB",
    "slug": "mariadb",
    "views": 308,
    "thumbnail": "articles/tags/mariadb.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 10,
  "fields": {
    "title": "Materializecss",
    "slug": "materializecss",
    "views": 365,
    "thumbnail": "articles/tags/materializecss.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 11,
  "fields": {
    "title": "PHP",
    "slug": "php",
    "views": 304,
    "thumbnail": "articles/tags/php.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 12,
  "fields": {
    "title": "ssh",
    "slug": "ssh",
    "views": 293,
    "thumbnail": "articles/tags/ssh.png"
  }
},
{
  "model": "blog.tag",
  "pk": 13,
  "fields": {
    "title": "DotNet",
    "slug": "dotnet",
    "views": 261,
    "thumbnail": "articles/tags/dotnet-logo.png"
  }
},
{
  "model": "blog.tag",
  "pk": 14,
  "fields": {
    "title": "Gulp",
    "slug": "gulp",
    "views": 262,
    "thumbnail": "articles/tags/gulp.png"
  }
},
{
  "model": "blog.tag",
  "pk": 15,
  "fields": {
    "title": "Javascript",
    "slug": "javascript",
    "views": 223,
    "thumbnail": "articles/tags/javascript.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 16,
  "fields": {
    "title": "Nodejs",
    "slug": "nodejs",
    "views": 221,
    "thumbnail": "articles/tags/nodejs.png"
  }
},
{
  "model": "blog.tag",
  "pk": 17,
  "fields": {
    "title": "Git",
    "slug": "git",
    "views": 146,
    "thumbnail": "articles/tags/git.jpg"
  }
},
{
  "model": "blog.tag",
  "pk": 20,
  "fields": {
    "title": "DotNet Core",
    "slug": "dotnet-core",
    "views": 0,
    "thumbnail": "articles/tags/dotnet_core.png"
  }
},
{
  "model": "blog.article",
  "pk": 1,
  "fields": {
    "title": "Mi primera entrada!",
    "slug": "mi-primera-entrada",
    "owner": 1,
    "default_tag": 4,
    "image_header": "",
    "body": "Esta es mi primera entrada en un Blog que me he estado creando para hacer unas practicas,\r\naprovechare para poner algunas experiencias sobre linux y programaci\u00f3n Web.\r\n\r\nEl Blog esta hecho en Django y ha sido mi primer sitio hecho con el Framework,\r\nespero que no tenga muchos fallos :).",
    "active": true,
    "views": 187,
    "create_at": "2015-01-16T08:55:24Z",
    "update_at": "2017-01-19T02:00:49.927Z",
    "tags": [
      4
    ]
  }
},
{
  "model": "blog.article",
  "pk": 2,
  "fields": {
    "title": "Instalaci\u00f3n de PostgreSQL en Fedora 21",
    "slug": "instalacion-de-postgresql-en-fedora-21",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "Lo primero es instalar los paquetes b\u00e1sicos:\r\n\r\n    su\r\n    dnf install -y postgresql postgresql-server\r\n\r\nOpcionalmente, ``pgadmin3``\r\n\r\n    dnf install -y pgadmin3\r\n\r\nPara ``psycopg2`` de Django, es necesario tambi\u00e9n tener los devel.\r\n\r\n    dnf install -y postgresql-devel\r\n\r\n``initdb`` crea un nuevo cl\u00faster PostgreSQL de la base de datos. Un cl\u00faster de base de datos es una colecci\u00f3n de bases de datos que son administrados por una sola instancia de servidor, tambi\u00e9n se a\u00f1ade como servicio y se inicia.\r\n\r\n    postgresql-setup initdb\r\n    systemctl enable postgresql.service\r\n    systemctl start postgresql.service\r\n\r\nEntramos con el usuario postgres y luego a ``psql`` (terminal interactiva para trabajar con Postgres), ponemos un password para el usuario ``postgres``.\r\n\r\n    su - postgres\r\n    psql\r\n    \\password postgres\r\n\r\nSe puede crear un usuario y una base de datos, para no usar el usuario postgres.\r\n\r\n    CREATE USER snicoper WITH PASSWORD '123456' NOCREATEDB NOCREATEUSER;\r\n    CREATE DATABASE practicas WITH OWNER snicoper;\r\n    \\q\r\n    exit\r\n\r\nLa configuraci\u00f3n puede variar, pero de manera simple, yo siempre impido que se pueda acceder desde fuera de la maquina y en caso de necesitar acceder, hacerlo con un t\u00fanel SSH.\r\n\r\n    vim /var/lib/pgsql/data/postgresql.conf\r\n\r\n    # linea 59\r\n    listen_addresses = 'localhost'\r\n\r\n    # linea 63 descomentar\r\n    port = 5432\r\n\r\nY por ultimo, configurar el archivo de configuraci\u00f3n de autenticaci\u00f3n.\r\n\r\n    vim  /var/lib/pgsql/data/pg_hba.conf\r\n\r\nAl final de archivo, yo pongo todos en ``md5``\r\n\r\n    # TYPE  DATABASE        USER            ADDRESS                 METHOD\r\n\r\n    # \"local\" is for Unix domain socket connections only\r\n    local   all         all                               md5\r\n    # IPv4 local connections:\r\n    host    all         all         127.0.0.1/32          md5\r\n    # IPv6 local connections:\r\n    host    all         all         ::1/128               md5\r\n    \r\nReiniciar el servicio\r\n\r\n    systemctl restart postgresql.service\r\n\r\nEn principio es un configuracion sencilla y rapida :)\r\n\r\n[Wiki Fedora](https://fedoraproject.org/wiki/PostgreSQL)",
    "active": true,
    "views": 242,
    "create_at": "2015-01-17T10:03:18Z",
    "update_at": "2017-01-19T02:00:49.904Z",
    "tags": [
      1,
      3
    ]
  }
},
{
  "model": "blog.article",
  "pk": 3,
  "fields": {
    "title": "Incluir Markdown en Django",
    "slug": "incluir-markdown-en-django",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Insertar Markdown en art\u00edculos, es para mi una de las formas mas c\u00f3modas y limpias de generar una estructura en el documento sin tener que estar escribiendo cientos de etiquetas HTML, y si ademas a\u00f1ades trozos de c\u00f3digo para mostrar, aun mas raz\u00f3n para utilizar Markdown.\r\n\r\nEste blog, es lo que utiliza y hoy voy a explicar como lo hago para que muestre el c\u00f3digo coloreado, entre otras cosas, listas, encabezados, etc.\r\n\r\nPara eso, hay dos paquetes para Django, [django-markdown-deux](https://github.com/trentm/django-markdown-deux) y [django-pagedown](https://github.com/timmyomahony/django-pagedown).\r\n\r\n* **django-pagedown:** Una aplicaci\u00f3n Django que permite a\u00f1adir formularios como los de **StackOverflow** en la administraci\u00f3n o en cualquier otra pagina.\r\n* **django-markdown-deux:** Una aplicaci\u00f3n que provee **template tags** para usar Markdown usando **python-markdown2**.\r\n\r\n### Instalaci\u00f3n:\r\n\r\n---\r\n\r\n    pip install django-pagedown django-markdown-deux\r\n\r\na\u00f1adimos ambas aplicaciones al ``settings.py``\r\n\r\n    INSTALLED_APPS = (\r\n        # ...\r\n        'markdown_deux',\r\n        'pagedown',\r\n    )\r\n\r\nEl que mas me gusta a mi, es ``django-markdown-deux``, ya que es el que formatea el c\u00f3digo en los templates. ``pagedown``, perfectamente se podria editar (que es lo que hago yo) el articulo, comentario, etc, con sublime text y el addon [MarkdownEditing](https://github.com/SublimeText-Markdown/MarkdownEditing) y [sublimetext-markdown-preview](https://github.com/revolunet/sublimetext-markdown-preview).\r\n\r\nPero vamos a empezar con django-pagedown :P.\r\n\r\nImaginando que tenemos un modelo muy simplificado para art\u00edculos, que podr\u00eda ser mas a menos asi:\r\n\r\n    # my_app/models.py\r\n\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        body = models.TextField()\r\n\r\ny quisi\u00e9ramos que en la administraci\u00f3n, saliera el formulario a lo **StackOverflow**, solo tendr\u00edamos que editar ``admin.py`` de la aplicaci\u00f3n.\r\n\r\n    #my_app/admin.py\r\n\r\n    from pagedown.widgets import AdminPagedownWidget\r\n    from django.db import models\r\n\r\n    class ArticleAdmin(models.ModelAdmin):\r\n        formfield_overrides = {\r\n            models.TextField: {'widget': AdminPagedownWidget },\r\n        }\r\n\r\n    admin.site.register(Article, ArticleAdmin)\r\n\r\nCon lo anterior, los campos ``TextField`` del modelo ``Article``, mostrar\u00eda el formulario con los iconos, una vista previa debajo del formulario, etc.\r\n\r\nAhora vamos a pasar a los templates, para formatear el articulo y que lo \"convierta\" a markdown.\r\n\r\n    # templates/my_app/my_template.html\r\n\r\n    {% extends 'base.html' %}\r\n    {% load markdown_deux_tags %}\r\n\r\n    {% block content %}\r\n        {{ article.body|markdown }}\r\n    {% endblock content %}\r\n\r\nListo, con eso ya el articulo, tendra un bonito aspecto y formateado. Solo hay que tener en cuanta dos cosas ``{% load markdown_deux_tags %}``, cargar las extra etiquetas de markdown_deux y luego decirle que es lo que queremos que pre formatee ``{{ article.body|markdown }}``.\r\n\r\n### Configuraci\u00f3n\r\n\r\n---\r\n\r\nEs posible, tener varias configuraciones para diferentes situaciones, por ejemplo, en los art\u00edculos, lo normal es que los edite un administrador o alguien de confianza, por lo que perfectamente, se podr\u00edan incluir etiquetas HTML, mientras que en los comentarios, no es una buena idea...\r\n\r\nUna configuraci\u00f3n b\u00e1sica, podr\u00eda ser la siguiente, esto lo incluimos en el ``settings.py``\r\n\r\n    # django-markdown-deux\r\n    MARKDOWN_DEUX_STYLES = {\r\n        \"default\": {\r\n            \"extras\": {\r\n                \"code-friendly\": None,\r\n            },\r\n            \"safe_mode\": \"escape\",\r\n        },\r\n        # IMPORTANTE: Usar 'safe' solo donde los usuarios no insertan texto.\r\n        \"safe\": {\r\n            \"extras\": {\r\n                \"code-friendly\": None,\r\n            },\r\n            \"safe_mode\": False,\r\n        },\r\n    }\r\n\r\nDe esta manera, donde ten\u00edamos ``{{ article.body|markdown }}``, lo podemos cambiar por ``{{ article.body|markdown:'safe' }}``, y as\u00ed, poder incluir HTML, mientras que en los comentarios, lo dejar\u00edamos como antes o podr\u00edamos poner ``{{ article.body|markdown:'default' }}``, que es exactamente lo mismo.\r\n\r\nHay mas configuraciones, as\u00ed como poner tambi\u00e9n el ``textarea`` a lo **StackOverflow** en partes donde el usuario inserta texto, para eso puedes hachar un vistazo a la documentaci\u00f3n de ambas aplicaciones.\r\n\r\n### Colorear el texto en los c\u00f3digos.\r\n\r\nPara que el c\u00f3digo salga coloreado, es muy f\u00e1cil. Hay un mont\u00f3n de maneras de hacerlo, como por ejemplo [highlight.js](https://highlightjs.org/) o [google-code-prettify](https://code.google.com/p/google-code-prettify/). Para un ejemplo r\u00e1pido, usare el segundo, google-code-prettify.\r\n\r\nPrimero se descarga desde desde la pagina, en downloads (para variar), una vez descargado y descomprimido, mover la carpeta a ``static/js``, dentro de la carpeta ``google-code-prettify``, que acabamos de mover, esta el archivo ``prettify.css``, yo lo muevo a ``static/css``.\r\n\r\nAhora solo hay que editar el ``base.html`` (o en la app que quieras ponerlo), para incluirlo el ``static/css/prettify.css`` y ``static/js/prettify.js``\r\n\r\n    # templates/base.html\r\n\r\n    <!-- En el head -->\r\n    <link href=\"{% static \"css/prettify.css\" %}\" rel=\"stylesheet\">\r\n\r\n    <!-- Antes de la etiqueta de cierre de body -->\r\n    <script src=\"{% static \"js/google-code-prettify/prettify.js\" %}\"></script>\r\n\r\nY ya solo queda decirle que cuando encuentra una etiqueta ``<pre>`` que le a\u00f1ada una clase ``css``.\r\n\r\n    <script src=\"{% static \"js/google-code-prettify/prettify.js\" %}\"></script>\r\n    <script>\r\n        $('pre').addClass('prettyprint');\r\n        prettyPrint();\r\n    </script>\r\n\r\nCon esto, ya deber\u00eda ir todo bien ;-), ya como ultimo apunte, aqu\u00ed tienes algunos temas ``css`` para ``prettify.css``, simplemente sobre escribe el que tienes en ``static/css/prettify.css``.\r\n\r\n* [http://demo.stanleyhlng.com/prettify-js/?id=bootstrap-light](http://demo.stanleyhlng.com/prettify-js/?id=bootstrap-light)\r\n* [http://jmblog.github.io/color-themes-for-google-code-prettify/](http://jmblog.github.io/color-themes-for-google-code-prettify/)\r\n* [https://github.com/RaphaelDDL/google-prettify-monokai-theme](https://github.com/RaphaelDDL/google-prettify-monokai-theme)",
    "active": true,
    "views": 396,
    "create_at": "2015-01-18T09:55:18Z",
    "update_at": "2017-01-19T02:00:49.885Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 4,
  "fields": {
    "title": "Django Paginaci\u00f3n en CBV.",
    "slug": "django-paginacion-en-cbv",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "La paginaci\u00f3n de **objetos** es algo tremendamente \u00fatil y en Django, tremendamente f\u00e1cil.\r\n\r\n    # myapp/views.py\r\n    class MyModelListView(ListView):\r\n        model = MyModel\r\n        template_name = 'myapp/my_template.html'\r\n        paginate_by = 10\r\n\r\nSimplemente en el template, a\u00f1adimos este trozo de c\u00f3digo que se auto explica solo.\r\n\r\n    <!-- myapp/templates/my_template.html -->\r\n\r\n    <nav>\r\n        {% if is_paginated %}\r\n            <ul class=\"pagination\">\r\n                {% if page_obj.has_previous %}\r\n                    <li><a href=\"?page={{ page_obj.previous_page_number }}\">&laquo;</a></li>\r\n                {% endif %}\r\n\r\n                {% for i in paginator.page_range %}\r\n                    <li {% if page_obj.number == i %} class=\"active\" {% endif %}>\r\n                        <a href=\"?page={{i}}\">{{ i }}</a>\r\n                    </li>\r\n                {% endfor %}\r\n\r\n                {% if page_obj.has_next %}\r\n                    <li><a href=\"?page={{ page_obj.next_page_number }}\">&raquo;</a></li>\r\n                {% endif %}\r\n            </ul>\r\n        {% endif %}\r\n    </nav>\r\n\r\n[https://djangosnippets.org/snippets/3023/](https://djangosnippets.org/snippets/3023/)",
    "active": true,
    "views": 214,
    "create_at": "2015-01-19T12:00:18Z",
    "update_at": "2017-01-19T02:00:49.863Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 5,
  "fields": {
    "title": "Poner diccionario espa\u00f1ol en Sublime Text 3",
    "slug": "poner-diccionario-espanol-en-sublime-text-3",
    "owner": 1,
    "default_tag": 7,
    "image_header": "",
    "body": "Tener un diccionario en el editor es algo realmente \u00fatil, pero Sublime Text, solo trae por defecto el idioma Ingles.\r\n\r\nEs posible poner muchos mas idiomas de una manera muy f\u00e1cil, para ello, descargamos de este repositorio de [GitHub](https://github.com/SublimeText/Dictionaries) los diccionarios.\r\n\r\n    cd ~/Downloads\r\n    git clone git://github.com/SublimeText/Dictionaries.git Dictionaries\r\n\r\nCreamos una carpeta para poner los diccionarios que nos interesan, en mi caso el **Spanish**.\r\n\r\n    mkdir -p ~/.config/sublime-text-3/Packages/Language\r\n\r\nY copiamos los archivos del espa\u00f1ol.\r\n\r\n    cp Dictionaries/Spanish.* ~/.config/sublime-text-3/Packages/Language\r\n\r\nEn **ST3**, en el men\u00fa **View -> Dictionary**, seleccionamos el idioma y luego para resaltar los errores de idioma le damos a ``F6``.",
    "active": true,
    "views": 1373,
    "create_at": "2015-01-19T12:22:18Z",
    "update_at": "2017-01-19T02:00:49.841Z",
    "tags": [
      7
    ]
  }
},
{
  "model": "blog.article",
  "pk": 6,
  "fields": {
    "title": "Obtener el objeto anterior y siguiente al actual.",
    "slug": "obtener-el-objeto-anterior-y-siguiente-al-actual",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "A veces es \u00fatil obtener el objeto anterior o siguiente del actual objeto y con Django es algo muy sencillo.  \r\nUn ejemplo ideal, este Blog, que al final de la entrada se puede ver un link mostrando el articulo siguiente a la derecha y el anterior en la izquierda, bas\u00e1ndonos en este Blog, a groso modo seria el siguiente c\u00f3digo.\r\n\r\nEl modelo.\r\n\r\n    # my_app/models.py\r\n\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=50)\r\n        slug = models.SlugField(max_length=50)\r\n        # ...\r\n\r\nLa vista.\r\n\r\n    # my_app/views.py\r\n\r\n    class ArticleDetailView(generic.DetailView):\r\n        template_name = 'blog/article_detail.html'\r\n        model = Article\r\n        context_object_name = 'article'\r\n\r\n        def get_context_data(self, **kwargs):\r\n            context = super(ArticleDetailView, self).get_context_data(**kwargs)\r\n            # Obtener el anterior y siguiente articulo.\r\n            actual = self.get_object()\r\n            try:\r\n                context['article_previous'] = actual.get_previous_by_create_at()\r\n            except:\r\n                pass\r\n            try:\r\n                context['article_next'] = actual.get_next_by_create_at()\r\n            except:\r\n                pass\r\n            return context\r\n\r\nRealmente es lo \u00fanico que hay que destacar es ``get_previous_by_create_at()`` y ``get_next_by_create_at()``, que son los que hacen todo el trabajo por nosotros, y son los encargados de obtener los objetos siguiente y anterior al objeto que estamos manejando, en este caso con ``self.get_object()``.\r\n\r\n<div class=\"alert alert-warning\">\r\n    <strong>get_(next|previous)_by_XXX</strong>, donde <code>XXX</code> es un campo del modelo y el campo ha de ser <code>DateField</code> o <code>DateTimeField</code>\r\n</div>\r\n\r\nY ya por ultimo, el template.\r\n\r\n    <!-- my_app/template_name.html -->\r\n\r\n    <nav class=\"paginated\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n                {% if article_previous %}\r\n                    <a href=\"{% url 'blog.article_detail' article_previous.slug %}\">\r\n                        <span class=\"glyphicon glyphicon-chevron-left\"></span>\r\n                        {{ article_previous }}\r\n                    </a>\r\n                {% endif %}\r\n            </div>\r\n            <div class=\"col-sm-6 text-right\">\r\n                {% if article_next %}\r\n                    <a href=\"{% url 'blog.article_detail' article_next.slug %}\">\r\n                        {{ article_next }}\r\n                        <span class=\"glyphicon glyphicon-chevron-right\"></span>\r\n                    </a>\r\n                {% endif %}\r\n            </div>\r\n        </div>\r\n    </nav>\r\n\r\n### Fuentes\r\n\r\n---\r\n\r\n* [https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.get_next_by_FOO](https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.get_next_by_FOO)",
    "active": true,
    "views": 257,
    "create_at": "2015-01-20T12:06:18Z",
    "update_at": "2017-01-19T02:00:49.829Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 7,
  "fields": {
    "title": "Django cache con redis en Fedora21/Centos7",
    "slug": "django-cache-con-redis-en-fedora21centos7",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "Usando cache, sobre todo en sitios con mucho trafico, se puede ahorrar muchos recursos de cpu entre otras y el usuario lo nota en velocidad de respuesta.\r\nSe ha de tener cuidado al usarla y donde usarla, no creo que al usuario perico le haga gracia ver en la bienvenida **Hola, bienvenido de nuevo palote**.\r\n\r\nSe ha de tener en cuanta, que partes del sitio son compartidas por todos los usuarios con la misma informaci\u00f3n y con que frecuencia cambia esa informaci\u00f3n, por ejemplo la pagina principal de un Blog, no suele cambiar muy a menudo pero en cambio los comentarios del articulo, puede cambiar con frecuencia en tiempos indeterminados.\r\n\r\n> Colocar en cache algo significa guardar el resultado de un c\u00e1lculo costoso para que no se tenga que realizar lo mismo la pr\u00f3xima vez. Aqu\u00ed mostramos un pseudoc\u00f3digo explicando como podr\u00eda funcionar esto para una p\u00e1gina Web din\u00e1mica:\r\n\r\n    dada una URL, buscar esa p\u00e1gina en la cache\r\n    si la p\u00e1gina est\u00e1 en la cache:\r\n        devolver la p\u00e1gina en cache\r\n    si no:\r\n        generar la p\u00e1gina\r\n        guardar la p\u00e1gina generada en la cache (para la pr\u00f3xima vez)\r\n        devolver la p\u00e1gina generada\r\n\r\nTeniendo en cuenta todo lo anterior, vamos primero a instalar [redis](http://redis.io/) en el sistema y el paquete [django-redis](https://github.com/niwibe/django-redis) para django.\r\n\r\n### Instalacion en Fedora y Centos\r\n\r\nRealmente es muy sencillo.\r\n\r\n    su\r\n    dnf install redis -y\r\n\r\nIniciar redis\r\n\r\n    systemctl start redis.service\r\n\r\nY si se quiere poner como servicio\r\n\r\n    systemctl enable redis.service\r\n\r\nEl archivo de configuraci\u00f3n se encuentra en ``/etc/redis.conf``\r\n\r\n### Instalacion django-redis\r\n\r\n    pip install django-redis\r\n\r\n### Configuracion en el settings.py\r\n\r\nEn el archivo ``settings.py``, a\u00f1adimos las siguientes lineas para decirle a Django que backend usara para la cache.\r\n\r\n    # my_project/settings.py\r\n\r\n    CACHES = {\r\n        \"default\": {\r\n            \"BACKEND\": \"django_redis.cache.RedisCache\",\r\n            \"LOCATION\": \"redis://127.0.0.1:6379/1\",\r\n            \"OPTIONS\": {\r\n                \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\r\n            }\r\n        }\r\n    }\r\n\r\n### Usar cache en el codigo\r\n\r\nHay varias formas de usar la cache como pueden ser:\r\n\r\n* cache por sitio\r\n* cache por vista\r\n* cache partes de un template\r\n* cach\u00e9 de bajo nivel\r\n* cache upstream\r\n\r\nVamos hacer un ejemplo de cada una de ellas.\r\n\r\n#### Cache por sitio\r\n\r\nUna vez que la memoria cach\u00e9 est\u00e1 configurado, la forma m\u00e1s sencilla de utilizar el almacenamiento en cach\u00e9 es almacenar en cach\u00e9 todo su sitio.\r\n\r\n    # Solo es necesario si se va hacer cache en todo el sitio.\r\n    MIDDLEWARE_CLASSES = (\r\n        'django.middleware.cache.UpdateCacheMiddleware',\r\n        'django.middleware.common.CommonMiddleware',\r\n        'django.middleware.cache.FetchFromCacheMiddleware',\r\n    )\r\n\r\n<div class=\"alert alert-info\">\r\n    La posici\u00f3n de <strong>UpdateCacheMiddleware</strong>, y <strong>FetchFromCacheMiddleware</strong>, importa, <strong>UpdateCacheMiddleware</strong> debe ser el primero y <strong>FetchFromCacheMiddleware</strong>, el ultimo.\r\n</div>\r\n\r\nLuego, agrega las siguientes propiedades en el archivo de configuraci\u00f3n de Django:\r\n\r\n* **CACHE_MIDDLEWARE_ALIAS** - El alias de cach\u00e9 a utilizar para el almacenamiento.\r\n* **CACHE_MIDDLEWARE_SECONDS** - El n\u00famero de segundos que cada p\u00e1gina debe almacenar en cach\u00e9.\r\n* **CACHE_MIDDLEWARE_KEY_PREFIX** - Si la cache es compartida a trav\u00e9s de m\u00faltiples sitios usando la misma instalaci\u00f3n Django, coloca esta propiedad como el nombre del sitio, u otra cadena que sea \u00fanica para la instancia de Django, para prevenir colisiones. Usa una cadena vac\u00eda si no te interesa.\r\n\r\nPara usar este tipo de cache, te recomiendo que leas la secci\u00f3n completa en la [documentacion de Django](https://docs.djangoproject.com/en/1.7/topics/cache/#the-per-site-cache).\r\n\r\n### Cache por vista\r\n\r\nDe esta manera, en vez de tener todo el sitio en cache, solo pones en cache las vistas que quieras.\r\n\r\n#### FBV Vistas basadas en funciones.\r\n\r\nPara poner una vista en cache, se usan decoradores en las funciones de vista.\r\n\r\n    # my_app/views.py\r\n\r\n    from django.views.decorators.cache import cache_page\r\n\r\n    @cache_page(60 * 15)\r\n    def my_view(request, param):\r\n        # ...\r\n\r\nDonde ``(60 * 15)`` es el tiempo en segundos que de guardara en cache la vista.\r\n\r\n#### CBV Vistas basadas en Clases.\r\n\r\nPara poner una vista en cache, se ponen en las ``URLConf``\r\n\r\n    # my_app/urls.py\r\n\r\n    from django.views.decorators.cache import cache_page\r\n\r\n    from . import views\r\n\r\n    urlpatterns = patterns(\r\n        '',\r\n\r\n        url(r'^$', cache_page(60 * 15)(views.MyView.as_view()), name='my_view'),\r\n    )\r\n\r\nHace exactamente lo mismo que las **FBV**, poniendo el tiempo en segundos en ``cache_page(tiempo_en_segundos)``.\r\n\r\nTanto la **cache por sitio** como la **cache por vista**, se ha de tener cuidado, ya que el contenido de la pagina, cuando se almacene en cache, sera compartida para todos los usuarios el tiempo que se le haya puesto. y hay es donde hay que tener cuidado con **perico** y **palote**.\r\n\r\n### Cache partes de un template\r\n\r\nEsta se usa en los **templates** y aqu\u00ed puedes tener partes de un template en cache, evitando problemas que tienen las dos anteriores.\r\n\r\nPor ejemplo, puedes tener en cache la parte de un articulo con un tiempo de 10 minutos y la parte de los comentarios, o bien sin cache o si el sitio tiene mucho trafico, ponerle 10 seg.\r\n\r\nPara empezar, en el template se ha de cargar el **tag**.\r\n\r\n    # templates/my_app/my_template.html\r\n\r\n    {% load cache %}\r\n\r\nY ahora, en las partes del template que quieras almacenar, pones la siguiente **template tag**\r\n\r\n    <!-- templates/my_app/my_template.html -->\r\n\r\n    {% load cache %}\r\n\r\n    <!-- Parte de 'detalle del articulo' -->\r\n    {% cache 600 articulo_detalles %}\r\n    <!-- Poner aqu\u00ed el articulo -->\r\n    {% endcache %}\r\n\r\nPero, eso no es buena idea, por que durante 10 minutos, tendremos el mismo contenido en todos los art\u00edculos, eso ir\u00eda bien en un panel lateral del sitio que contiene informaci\u00f3n igual en todo el sitio, pero no en los detalles de art\u00edculos.\r\nPara evitar eso, podemos pesarle un argumento extra y \u00fanico a la cache de esta manera en ``{% cache 600 articulo_detalles argumento_unico %}``.\r\n\r\n    <!-- templates/my_app/my_template.html -->\r\n\r\n    {% load cache %}\r\n\r\n    <!-- Parte de 'detalle del articulo' -->\r\n    {% cache 600 articulo_detalles article.id %}\r\n    <!-- Poner aqui el articulo -->\r\n    {% endcache %}\r\n\r\nEs perfectamente posible especificar m\u00e1s de un argumento para identificar el fragmento. Basta con pasar tantos argumentos a ``{% cach\u00e9 %}`` como necesites.\r\n\r\n### Cach\u00e9 de bajo nivel\r\n\r\nA veces, solo quieres tener en cache alguna consulta compleja que requiere preguntar a la base de datos muchas veces, para no tener que estar haciendo la consulta una y otra vez, se podr\u00eda guardar la consulta en cache de esta manera.\r\n\r\n    # my_app/views.py\r\n\r\n    def my_view(request):\r\n        if not cache.get('my_key'):\r\n            # Si no esta en cache la consulta, la generamos\r\n            consulta = # Aqu\u00ed el resultado de la consulta\r\n            # y la guardamos en cache.\r\n            cache.set('my_key', consulta, 60 * 5)\r\n        else:\r\n            # La consulta esta en cache.\r\n            consulta = cache.get('my_key')\r\n        return render(request, 'my_template', {'consulta': consulta})\r\n\r\nCreo que es suficientemente auto explicativo el c\u00f3digo.\r\n\r\n### Cambiar session backend a redis\r\n\r\nEn el archivo de configuraci\u00f3n poner/cambiar:\r\n\r\n    SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\r\n    SESSION_CACHE_ALIAS = \"default\"\r\n\r\n**Fuentes**\r\n\r\n---\r\n\r\n* [redis](http://redis.io/)\r\n* [django-redis](https://github.com/niwibe/django-redis)\r\n* [Django](https://docs.djangoproject.com/en/1.7/topics/cache/)",
    "active": true,
    "views": 251,
    "create_at": "2015-01-21T09:03:18Z",
    "update_at": "2017-01-19T02:00:49.807Z",
    "tags": [
      2,
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 8,
  "fields": {
    "title": "Compartidos mis apuntes",
    "slug": "compartidos-mis-apuntes",
    "owner": 1,
    "default_tag": 4,
    "image_header": "",
    "body": "Hace a\u00f1os que procuro ir anotando las cosas que voy aprendiendo, aunque de una forma muy r\u00e1pida y solo para refrescar como se hacia, no es muy ideal para aprender, pero si para recordar.  \r\nHoy he subido esos apuntes (que antes tenia en readthedocs) para compartirlos con todos.\r\n\r\nEst\u00e1n creados con [Sphinx](http://sphinx-doc.org/) (reStructureText) y el c\u00f3digo de los apuntes los puedes encontrar en mi cuenta de [GitHub](https://github.com/snicoper)\r\n\r\nPara ver mis apuntes, he puesto un link en la barra de navegaci\u00f3n superior o puedes darle [aqu\u00ed](http://apuntes.snicoper.com/).",
    "active": true,
    "views": 217,
    "create_at": "2015-01-22T08:04:24Z",
    "update_at": "2017-01-19T02:00:49.790Z",
    "tags": [
      4
    ]
  }
},
{
  "model": "blog.article",
  "pk": 9,
  "fields": {
    "title": "Firewalld en Fedora",
    "slug": "firewalld-en-fedora",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "> firewalld provee un cortafuegos din\u00e1mico administrable con soporte para zonas de redes/cortafuego para definir el nivel de confianza de las redes conectadas o las interfaces. Tiene soporte para configuraciones de cortafuego para IPv4, IPv6 y para puentes de ethernet, posee una separaci\u00f3n de las configuraciones que est\u00e1n en ejecuci\u00f3n y las configuraciones permanentes. Tambi\u00e9n posee suporte una interface para servicios o aplicaciones para adicionar reglas directamente.\r\n\r\nAlgunos comandos \u00fatiles.\r\n\r\nSaber el estado del servicio:\r\n\r\n    firewall-cmd --state\r\n\r\nObtener el listado de zonas:\r\n\r\n    firewall-cmd --get-zones\r\n\r\nSaber la zona activada por defecto:\r\n\r\n<div class=\"alert alert-info\">\r\nEn Fedora gnome (<strong>Workstation</strong>), me he dado cuenta que por defecto viene <code>FedoraWorkstation</code> y Fedora KDE, <code>public</code>.\r\n</div>\r\n\r\n    firewall-cmd --get-default-zone\r\n\r\nPoner zona por defecto:\r\n\r\n    firewall-cmd --set-default-zone=public\r\n\r\nObtener los servicios abiertos en una zona dada.\r\n\r\n    firewall-cmd --zone=FedoraWorkstation --list-service\r\n    \r\nObtener los puertos abiertos en una zona dada.\r\n\r\n    firewall-cmd --zone=FedoraWorkstation --list-ports\r\n\r\nAbrir un puerto:\r\n\r\n    firewall-cmd --zone=FedoraWorkstation --add-port=xx/protocolo\r\n\r\nDonde ``xx`` es el numero de puerto y protocolo, pueden ser ``tcp/udp``, de esta manera se abre un puerto\r\nxx en el protocolo y, pero cuando se reinicia la maquina o cuando se usa ``firewall-cmd --reload``, vuelven a estar cerrados.\r\n\r\nAbrir un puerto permanente:\r\n\r\n    firewall-cmd --permanent --zone=FedoraWorkstation --add-port=xx/protocolo\r\n\r\nAhora el puerto seguir\u00e1 abierto cuando se reinicia la maquina.\r\n\r\nA\u00f1adir un rango de puertos:\r\n\r\n    firewall-cmd --permanent --zone=FedoraWorkstation --add-port=2000-2010/tcp\r\n\r\nTodo lo anterior, para eliminar puertos simplemente hay cambiar ``--add-port=`` por ``--remove-port=``.\r\n\r\nA\u00f1adir un servicio:\r\n\r\n    firewall-cmd --zone=FedoraWorkstation --add-service=http\r\n\r\nAqu\u00ed lo mismo, si se quiere permanente, a\u00f1adir la bandera ``--permanent`` y si se quiere eliminar en vez de a\u00f1adir, cambiar ``--add-service`` por ``--remove-service``.\r\n\r\nBloquear todo el trafico a una IP:\r\n\r\n    firewall-cmd --permanent --add-rich-rule=\"rule family='ipv4' source address='192.168.101.111' reject\"\r\n\r\n<div class=\"alert alert-info\">En Fedora 21, por defecto los puertos 1025 a 65535 (tcp/udp) estan abiertos, si se quisieran cerrar, simplemente ejecutoriamos.\r\n\r\n<pre><code>firewall-cmd --permanent --zone=FedoraWorkstation --remove-port=1025-65535/udp\r\nfirewall-cmd --permanent --zone=FedoraWorkstation --remove-port=1025-65535/tcp\r\nfirewall-cmd --reload</code></pre>\r\n</div>\r\n**Fuentes**\r\n\r\n---\r\n\r\n* [https://fedoraproject.org/wiki/FirewallD/es](https://fedoraproject.org/wiki/FirewallD/es)",
    "active": true,
    "views": 312,
    "create_at": "2015-01-23T07:16:24Z",
    "update_at": "2017-01-19T02:00:49.766Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 10,
  "fields": {
    "title": "CTE Django y PostgreSQL",
    "slug": "cte-django-y-postgresql",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "En los \u00faltimos d\u00edas he estado leyendo un poco sobre consultas re cursivas, sobre todo por la parte de los comentarios, que ahora hace un mont\u00f3n de consultas en la base de datos.\r\n\r\nEste es el modelo, simplificado, de los comentarios\r\n\r\n    class CommentArticle(models.Model):\r\n        body = models.TextField()\r\n        owner = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='comment_owner')\r\n        article = models.ForeignKey(Article, related_name='comment_article')\r\n        parent = models.ForeignKey('self', null=True, blank=True)\r\n        depth = models.SmallIntegerField(default=0)\r\n\r\n        # ....\r\n\r\nMas o menos, ahora esto es lo que hace:\r\n\r\nObtener todos los comentarios padres que ``parent`` sea null, y despu\u00e9s recorrerlos todos para obtener sus hijos.\r\n\r\n    def get_comments(self):\r\n        \"\"\"\r\n        Obtener los comentarios del articulo actual\r\n        ordenados por nivel.\r\n\r\n        Se obtiene los comentarios de primer nivel y cada\r\n        nivel obtiene los comentarios hijos.\r\n        \"\"\"\r\n        self.comment_list = list()\r\n        # Obtener los comentarios de primer nivel.\r\n        comment_list = CommentArticle.objects.published(\r\n            article=self.article, parent=None,\r\n        ).order_by('-create_at')\r\n        # Obtener recursivamente, los hijos del comentario.\r\n        for comment in comment_list:\r\n            self._ordering_comments(comment)\r\n        return self.comment_list\r\n\r\nA\u00f1adir\u00e1 el comentario en la list ``self.comment_list`` y preguntara si el comentario tiene hijos, si los tiene, recorrer\u00e1 recursivamente, cada hijo en busca de mas hijos/nietos.\r\n\r\n    def _ordering_comments(self, comment):\r\n        \"\"\"\r\n        Recorre cada comentario para ver si tiene\r\n        hijos, si los tiene se llama recuersivamente\r\n        al m\u00e9todo.\r\n        \"\"\"\r\n        self.comment_list.append(comment)\r\n        childs = comment._get_childs()\r\n        if childs:\r\n            for child in childs:\r\n                self._ordering_comments(child)\r\n\r\nSolo comprueba si tiene hijos.\r\n\r\n    def _get_childs(self):\r\n        \"\"\"\r\n        Obtener los comentarios hijos del comentario\r\n        actual.\r\n        \"\"\"\r\n        return CommentArticle.objects.published(parent=self.id)\r\n\r\nEn un \u00e1rbol de comentarios como el siguiente\r\n\r\n    1.0 Primer comentario de primer nivel\r\n        1.1 respuesta a 1.0\r\n        1.2 respuesta a 1.0\r\n            1.2.1 respuesta a 1.2\r\n            1.2.2 respuesta a 1.2\r\n    2.0 Segundo comentario de primer nivel\r\n        2.1 respuesta a 2.0\r\n            2.1.1 respuesta a 2.1\r\n\r\nla primera consulta obtendr\u00eda ``1.0 y 2.0`` que son los padres, despu\u00e9s ``1.0`` har\u00eda la consulta para obtener ``1.1 y 1.2`` que a su vez consultar\u00edan si tienen hijos, como m\u00ednimo una consulta mas solo para saber si tiene, ``1.1``, no tiene por lo que ese \u00e1rbol ya no har\u00eda mas, pero ``1.2``, como ha obtenido 2 respuestas mas, tendr\u00eda que hacer 2 consultas mas.  \r\nMas de lo mismo con ``2.0``\r\n\r\nSi mis c\u00e1lculos no me fallan, son 9 consultas a la base de datos para 8 comentarios, eso sin contar en el ``template``, las consultas a las relaciones de ``owner`` y ``article``, en fin, con 20 comentarios con diferentes niveles, podr\u00edan hacer 100 consultas f\u00e1cilmente.\r\n\r\nSi el sitio es peque\u00f1o como este, pues no es un problema, seria una sobre carga a la base de datos grande y el usuario unas d\u00e9cimas mas en tiempo de respuesta.  \r\nPero es un sitio con mucho trafico, podr\u00eda ser terrible, por lo menos si hay soluciones.\r\n\r\nUna de esas soluciones, seria haciendo una \u00fanica consulta con ``WITH RECURSIVE``\r\n\r\n<div class=\"alert alert-warning\">\r\nEsta es la parte mas dif\u00edcil para mi de explicar, por que, entre que esto apenas lo conozco y lo mal que me expreso, puede quedar todo este articulo como un churro :)\r\n</div>\r\n\r\n### WITH RECURSIVE con PostgreSQL\r\n\r\nUn peque\u00f1o ejemplo:\r\n\r\n    WITH RECURSIVE cte (id, body, article_id, owner_id, \r\n                        parent_id, depth, path) \r\n    AS (\r\n        SELECT \r\n            id, body, article_id, owner_id, \r\n            parent_id, 0 AS depth, array[id] as path\r\n        FROM blog_commentarticle\r\n        WHERE parent_id IS NULL\r\n\r\n        UNION ALL\r\n\r\n        SELECT \r\n            bca.id, bca.body, bca.article_id, bca.owner_id, \r\n            bca.parent_id, cte.depth + 1 AS depth, \r\n            cte.path || bca.id\r\n        FROM blog_commentarticle AS bca\r\n        INNER JOIN cte ON bca.parent_id = cte.id\r\n    ) SELECT *\r\n      FROM CTE\r\n      WHERE article_id = 1\r\n      ORDER BY path;\r\n\r\nObteniendo el siguiente resultado:\r\n\r\n    id; body; article_id; owner_id; parent_id; depth; path\r\n\r\n    1; \"1.0 Primer comentario de primer nivel\"; 1; 1; ; 0; \"{1}\"\r\n    2; \"1.1 respuesta a 1.0\"; 1; 1; 1; 1; \"{1,2}\"\r\n    3; \"1.2 respuesta a 1.0\"; 1; 1; 1; 1; \"{1,3}\"\r\n    4; \"1.2.1 respuesta a 1.2\"; 1; 1; 3; 2; \"{1,3,4}\"\r\n    5; \"1.2.2 respuesta a 1.2\"; 1; 1; 3; 2; \"{1,3,5}\"\r\n    6; \"2.0 Segundo comentario de primer nivel\"; 1; 1; ;0; \"{6}\"\r\n    7; \"2.1 respuesta a 2.0\"; 1; 1; 6; 1; \"{6,7}\"\r\n    8; \"2.1.1 respuesta a 2.1\"; 1; 1; 7; 2; \"{6,7,8}\"\r\n\r\nObtenemos toda la informaci\u00f3n con una \u00fanica consulta e incluso con ``JOINs``, podr\u00edamos obtener los datos relacionales con las tablas de ``owner`` y ``article``.\r\n\r\nLa reducci\u00f3n de consultas es mas que evidente, y vale la pena, sobre todo si el sitio tiene algo de trafico.\r\n\r\nOtras opciones, podr\u00edan ser [django-mptt](https://github.com/django-mptt/django-mptt) o [django-treebeard](https://github.com/tabo/django-treebeard).\r\n\r\nPara profundizar mejor en el tema, mirar las fuentes:\r\n\r\n---\r\n\r\n**Fuentes**\r\n\r\n* [http://www.postgresql.org/docs/9.3/static/queries-with.html](http://www.postgresql.org/docs/9.3/static/queries-with.html)\r\n* [http://technobytz.com/recursive-query-evaluation-postgresql.html](http://technobytz.com/recursive-query-evaluation-postgresql.html)\r\n* [http://truongtx.me/2014/02/28/tree-structure-query-with-postgresql/](http://truongtx.me/2014/02/28/tree-structure-query-with-postgresql/)\r\n* [http://hashrocket.com/blog/posts/recursive-sql-in-activerecord](http://hashrocket.com/blog/posts/recursive-sql-in-activerecord)\r\n* [http://cramer.io/2010/05/30/scaling-threaded-comments-on-django-at-disqus/](http://cramer.io/2010/05/30/scaling-threaded-comments-on-django-at-disqus/)",
    "active": true,
    "views": 266,
    "create_at": "2015-01-26T11:53:18Z",
    "update_at": "2017-01-19T02:00:49.727Z",
    "tags": [
      2,
      3
    ]
  }
},
{
  "model": "blog.article",
  "pk": 11,
  "fields": {
    "title": "Cron Jobs Linux",
    "slug": "cron-jobs-linux",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "El servicio cron (demonio), es ejecutado en segundo plano y constantemente comprueba los archivos ``/etc/crontab`` y los directorios ``/etc/cron.d/`` y ``/var/spool/cron/`` para ejecutar procesos a intervalos regulares de tiempo.\r\n\r\nPrimero hay que ver si ``crond`` esta activo y funcionando:\r\n\r\n    systemctl status crond.service\r\n\r\nLo mas f\u00e1cil es usar ``crontab``, que cada usuario controla y es guardado en el directorio ``/var/spool/cron/``, con un archivo con el nombre del usuario.\r\n\r\nComo usuario, podemos tener control de ese archivo con el comando ``crontab``, con ``crontab -e`` editamos el archivo y ponemos los intervalos de tiempo y otras opciones que ahora veremos y con ``crontab -l``, se ve el contenido del archivo (como un ``cat archivo.txt``).\r\n\r\nDe momento, para un ejemplo r\u00e1pido, vamos a crear un script, lo \u00fanico que hace este script es a\u00f1adir en un archivo de texto en el home una linea poniendo la hora actual.\r\n\r\nCreamos un archivo en el home ``mostrar_fecha.sh`` y le a\u00f1adimos las siguientes lineas.\r\n\r\n    #!/bin/bash\r\n\r\n    fecha=`date +%Y-%m-%d_%H-%M`\r\n    echo fecha >> /home/snicoper/mostrar_fecha.txt\r\n    echo \"Se ha a\u00f1adido $fecha en el archivo mostrar_fecha.txt\"\r\n\r\nCambia **snicoper** por tu nombre de usuario!.\r\n\r\nLe damos permisos de ejecuci\u00f3n a ``mostrar_fecha.sh``\r\n\r\n    chmod +x mostrar_fecha.sh\r\n\r\nBien, de momento, tenemos el script que se ejecutara cada cierto tiempo, ahora tenemos que ponerlo en ``crontab``, primero pondr\u00e9 la linea en ``crontab`` y despu\u00e9s explico lo b\u00e1sico de como funciona.\r\n\r\n    crontab -e\r\n\r\nA\u00f1adimos la siguiente linea para que se ejecute cada minuto\r\n\r\n    * * * * * /home/snicoper/mostrar_fecha.sh\r\n\r\ny lo guardamos, y esperamos a que cambie de minuto. La primera vez, creara el archivo y a\u00f1adir\u00e1 la fecha y hora y despu\u00e9s cada minuto, a\u00f1adir\u00e1 una nueva linea con la fecha y hora actuales.\r\n\r\nAdemas si en aliases tenemos al usuario para recibir el correo de root, nos mandara un email con la salida del comando, en este caso seria **Se ha a\u00f1adido $fecha en el archivo mostrar_fecha.txt**.\r\n\r\nLos intervalos de tiempo se ponen en los asteriscos ``(*)``, cada asterisco representa lo siguiente.\r\n\r\n    # Example of job definition:\r\n    # .---------------- minuto (0 - 59)\r\n    # |  .------------- hora (0 - 23)\r\n    # |  |  .---------- d\u00eda del mes (1 - 31)\r\n    # |  |  |  .------- mes (1 - 12) OR jan,feb,mar,apr ...\r\n    # |  |  |  |  .---- d\u00eda de la semana (0 - 6) (domingo=0 o 7) O Dom,lun,mar,mier,jue,vie,sab\r\n    # |  |  |  |  |\r\n    # *  *  *  *  * [usuario]  comando a ser ejecutado\r\n\r\nAlgunos ejemplos de tiempo\r\n\r\nEjecutar cada minuto de cada hora de cada mes, etc.\r\n\r\n    * * * * * comando_a_ejecutar\r\n\r\nTodos los d\u00edas a las 05:01 de la ma\u00f1ana.\r\n\r\n    1 5 * * * comando_a_ejecutar\r\n\r\nCada 4 horas al minuto 20 de todos los d\u00edas.\r\n\r\n    */20 */4 * * * comando_a_ejecutar\r\n   \r\nA las 14:15 del primer d\u00eda de mes.\r\n\r\n    15 14 1 * * comando_a_ejecutar\r\n\r\nA las 22:00 de lunes a viernes\r\n\r\n    0 22 * * 1-5 comando_a_ejecutar\r\n\r\n### Operadores\r\n\r\n    Los operadores, permiten especificar varios valores en un campo.\r\n\r\n1. **El asterisco (*)**: Este operador especifica todos los valores posibles para un campo. Por ejemplo, un asterisco en el campo de hora hora ser\u00eda equivalente a cada hora o un asterisco en el campo del mes ser\u00eda equivalente a todos los meses\r\n2. **La coma (,)**: Este operador especifica una lista de valores, por ejemplo: \"1,5,10,15,20, 25\".\r\n3. **El guion (-)**: Este operador especifica una gama de valores, por ejemplo: dia \"5-15\", lo que equivale a escribir \"5,6,7,8,9, ...., 13,14,15\" usando el operador coma.\r\n4. **Barra (/)**: Este operador especifica un valor de paso, por ejemplo: para decir que se ejecute cada 2 horas, en el campo hora */2.\r\n\r\nEste seria un archivo de ejemplo de ``crontab``\r\n\r\n    SHELL=/bin/bash\r\n    PATH=/sbin:/bin:/usr/sbin:/usr/bin\r\n    MAILTO=snicoper@snicoper.com\r\n    HOME=/\r\n    # run-parts\r\n    01 * * * * snicoper run-parts /etc/cron.hourly\r\n    02 4 * * * snicoper run-parts /etc/cron.daily\r\n    22 4 * * 0 snicoper run-parts /etc/cron.weekly\r\n    42 4 1 * * snicoper run-parts /etc/cron.monthly\r\n\r\n---\r\n\r\n**Fuentes**\r\n\r\n* [http://es.wikipedia.org/wiki/Cron_%28Unix%29](http://es.wikipedia.org/wiki/Cron_%28Unix%29)\r\n* [http://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/](http://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/)",
    "active": true,
    "views": 218,
    "create_at": "2015-01-26T11:36:08Z",
    "update_at": "2017-01-19T02:00:49.748Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 12,
  "fields": {
    "title": "Nginx gunicorn Django en Fedora/Centos7",
    "slug": "nginx-gunicorn-django-en-fedoracentos7",
    "owner": 1,
    "default_tag": 6,
    "image_header": "",
    "body": "Servir un sitio Web Django con gunicorn y Nginx es algo que tarde o temprano todos hacemos, aunque solo sea para ver como responde nuestro sitio antes de ponerlo en producci\u00f3n y lidiar con los problemas que nos podemos encontrar cuando de verdad lo subamos a un servidor.\r\n\r\nEsta es una configuraci\u00f3n b\u00e1sica que funciona muy bien.\r\n\r\nEn primer lugar, instalamos nginx\r\n\r\n    sudo dnf install nginx\r\n\r\nPrimero creamos un entorno virtual con ``virtualenvwrapper``.\r\n\r\n    mkvirtualenv practica\r\n\r\nEl resto del ejemplo, estaremos usando el entorno virtual ``practica``.\r\n\r\nInstalar Django y Gunicorn con ``pip``.\r\n\r\n    pip install django\r\n    pip install gunicorn\r\n\r\nCreamos un directorio para todo el proyecto en ``~/webapps/`` yo para los ejemplos, uso mi usuario ``snicoper``, tu siempre pon tu usuario!.\r\n\r\n    cd ~/webapps\r\n    mkdir example.com\r\n\r\n\r\nCreamos unos directorios dentro de ``example.com``\r\n\r\n    cd example.com\r\n    mkdir bin run\r\n\r\nY ahora, creamos el proyecto Django, tambi\u00e9n dentro de ``example.com``\r\n\r\n    django-admin startproject example\r\n\r\nEsto nos crea el t\u00edpico proyecto Django\r\n\r\n    .\r\n    \u251c\u2500\u2500 bin\r\n    \u251c\u2500\u2500 example\r\n    \u2502   \u251c\u2500\u2500 example\r\n    \u2502   \u2502   \u251c\u2500\u2500 __init__.py\r\n    \u2502   \u2502   \u251c\u2500\u2500 settings.py\r\n    \u2502   \u2502   \u251c\u2500\u2500 urls.py\r\n    \u2502   \u2502   \u2514\u2500\u2500 wsgi.py\r\n    \u2502   \u2514\u2500\u2500 manage.py\r\n    \u2514\u2500\u2500 run\r\n\r\nCrearemos un archivo ``gunicorn_start.sh`` en el directorio ``bin/``.\r\n\r\n    vim bin/gunicorn_start.sh\r\n\r\ny a\u00f1adimos las siguientes lineas\r\n\r\n    #!/bin/bash\r\n\r\n    NAME=\"example.com\" # Name of the application\r\n    DJANGODIR=/home/snicoper/webapps/example.com/example # Django project directory\r\n    LOGFILE=/var/log/gunicorn/gunicorn.log\r\n    LOGDIR=$(dirname $LOGFILE)\r\n    SOCKFILE=/home/snicoper/webapps/example.com/run/gunicorn.sock # we will communicte using this unix socket\r\n    USER=snicoper # the user to run as\r\n    GROUP=snicoper # the group to run as\r\n    NUM_WORKERS=3 # how many worker processes should Gunicorn spawn\r\n    DJANGO_SETTINGS_MODULE=example.settings # which settings file should Django use\r\n    DJANGO_WSGI_MODULE=example.wsgi # WSGI module name\r\n\r\n    echo \"Starting $NAME as `whoami`\"\r\n\r\n    # Activate the virtual environment\r\n    source /home/snicoper/.virtualenvs/example.com/bin/activate\r\n    export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE\r\n    export PYTHONPATH=$DJANGODIR:$PYTHONPATH\r\n\r\n    # Create the run directory if it doesn't exist\r\n    RUNDIR=$(dirname $SOCKFILE)\r\n    test -d $RUNDIR || mkdir -p $RUNDIR\r\n\r\n    # Start your Django Unicorn\r\n    # Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)\r\n    exec gunicorn ${DJANGO_WSGI_MODULE}:application \\\r\n    --name $NAME \\\r\n    --workers $NUM_WORKERS \\\r\n    --user=$USER --group=$GROUP \\\r\n    --bind=unix:$SOCKFILE \\\r\n    --log-level=debug \\\r\n    --log-file=$LOGFILE 2>>$LOGFILE\r\n\r\nActualizar las rutas y usuario/grupo del script, y le damos permisos de ejecuci\u00f3n.\r\n\r\n    chmod +x bin/gunicorn_start.sh\r\n\r\nCrear directorio ``/var/log/gunicorn`` y dentro, el archivo ``gunicorn.log``\r\n\r\n    sudo mkdir /var/log/gunicorn\r\n    sudo chown snicoper:snicoper /var/log/gunicorn\r\n    touch /var/log/gunicorn/gunicorn.log\r\n\r\nY por ultimo, configurar un servidor virtual de nginx, para ello, creamos un archivo en ``etc/nginx/conf.d/example.com.conf``\r\n\r\n    sudo vim etc/nginx/conf.d/example.com.cof\r\n\r\nY a\u00f1adimos lo siguiente, una vez mas, asegurase que las rutas son las correctas y el usuario.\r\n\r\n    upstream example_app_server {\r\n      # fail_timeout=0 means we always retry an upstream even if it failed\r\n      # to return a good HTTP response (in case the Unicorn master nukes a\r\n      # single worker for timing out).\r\n\r\n      server unix:/home/snicoper/webapps/example.com/run/gunicorn.sock fail_timeout=0;\r\n    }\r\n\r\n    server {\r\n\r\n        listen   80;\r\n        server_name example.com;\r\n\r\n        client_max_body_size 4G;\r\n\r\n        access_log /var/log/nginx/example.com-access.log;\r\n        error_log /var/log/nginx/example.com-error.log;\r\n\r\n        location /static/ {\r\n            alias   /home/snicoper/webapps/example.com/static/;\r\n        }\r\n\r\n        location /media/ {\r\n            alias   /home/snicoper/webapps/example.com/media/;\r\n        }\r\n\r\n        location / {\r\n            # an HTTP header important enough to have its own Wikipedia entry:\r\n            #   http://en.wikipedia.org/wiki/X-Forwarded-For\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n\r\n            # enable this if and only if you use HTTPS, this helps Rack\r\n            # set the proper protocol for doing redirects:\r\n            # proxy_set_header X-Forwarded-Proto https;\r\n\r\n            # pass the Host: header from the client right along so redirects\r\n            # can be set properly within the Rack application\r\n            proxy_set_header Host $http_host;\r\n\r\n            # we don't want nginx trying to do something clever with\r\n            # redirects, we set the Host: header above already.\r\n            proxy_redirect off;\r\n\r\n            # set \"proxy_buffering off\" *only* for Rainbows! when doing\r\n            # Comet/long-poll stuff.  It's also safe to set if you're\r\n            # using only serving fast clients with Unicorn + nginx.\r\n            # Otherwise you _want_ nginx to buffer responses to slow\r\n            # clients, really.\r\n            # proxy_buffering off;\r\n\r\n            # Try to serve static files from nginx, no point in making an\r\n            # *application* server like Unicorn/Rainbows! serve static files.\r\n            if (!-f $request_filename) {\r\n                proxy_pass http://example_app_server;\r\n                break;\r\n            }\r\n        }\r\n\r\n        # Error pages\r\n        error_page 500 502 503 504 /500.html;\r\n        location = /500.html {\r\n            root /home/snicoper/webapps/example.com/templates/;\r\n        }\r\n    }\r\n\r\nReiniciamos el servidor nginx con\r\n    \r\n    sudo systemctl start nginx.service\r\n\r\n    # Si lo queremos como servicio.\r\n    sudo systemctl enable nginx.service\r\n\r\nAbrir el puesto 80\r\n\r\n    sudo firewall-cmd --permanent --zone=public --add-service=http\r\n    sudo firewall-cmd --reload\r\n\r\nPara la practica, el puerto no es necesario, pero hay queda :), y ahora le en ``/etc/hosts`` le decimos que ``example.com`` apunte a ``127.0.0.1``\r\n\r\n    sudo vim /etc/hosts\r\n\r\n    # A\u00f1adimos\r\n    127.0.0.1   example.com\r\n\r\nPrimero lo probamos manualmente\r\n\r\n    cd ~/webapps/example.com/bin\r\n    ./gunicorn_start.sh\r\n\r\nEntramos a [http://example.com](http://example.com)\r\n\r\nLo mas seguro que SELinux se queje con algo as\u00ed **SELinux is preventing nginx from write access on the sock_file gunicorn.sock.**.\r\n\r\nYo, para solucionar eso hice lo siguiente:\r\n\r\n    cd ~/webapps/example.com/run/\r\n\r\n    sudo grep nginx /var/log/audit/audit.log | audit2allow -M nginx\r\n    sudo semodule -i nginx.pp\r\n\r\nYa con eso, me funciono bien. Ahora, ya solo nos falta poner que ``gunicorn_start.sh`` se inicie al reiniciar la maquina y poderlo reiniciar de una manera r\u00e1pida.\r\n\r\nCasi todo el mundo lo hace con ``supervisor``, pero yo prob\u00e9 creando un servicio systemd y me funciona muy bien, as\u00ed que es como lo voy a poner.\r\n\r\n    sudo vim /etc/systemd/system/gunicorn.service\r\n\r\nY a\u00f1adimos los siguiente\r\n\r\n    [Unit]\r\n    Description=gunicorn daemon\r\n    After=syslog.target\r\n    After=network.target\r\n\r\n    [Service]\r\n    PIDFile=/run/gunicorn/pid\r\n    User=snicoper\r\n    Group=snicoper\r\n    WorkingDirectory=/home/snicoper/webapps/example.com/bin/\r\n    ExecStart=/bin/bash gunicorn_start.sh\r\n    ExecReload=/bin/kill -s HUP $MAINPID\r\n    ExecStop=/bin/kill -s TERM $MAINPID\r\n    PrivateTmp=true\r\n\r\n    [Install]\r\n    WantedBy=multi-user.target\r\n\r\nPara reiniciar, etc, se usa los t\u00edpicos comandos de systemd\r\n\r\n    sudo systemctl start gunicorn.service\r\n    sudo systemctl stop gunicorn.service\r\n    sudo systemctl restart gunicorn.service\r\n    sudo systemctl enable gunicorn.service\r\n\r\nEsta configuraci\u00f3n ha sido por socket entre gunicorn y nginx, pero tambien es posible hacerlo por IP, tengo unos [apuntes sobre el tema](http://apuntes-snicoper.readthedocs.org/es/latest/linux/nginx/nginx_gunicorn_django.html).\r\n\r\n---\r\n\r\n**Fuentes**\r\n\r\n* [http://gunicorn-docs.readthedocs.org/en/latest/index.html](http://gunicorn-docs.readthedocs.org/en/latest/index.html)\r\n* [https://gist.github.com/postrational/5747293](https://gist.github.com/postrational/5747293)\r\n* [http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/](http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/)\r\n* [http://superuser.com/questions/809527/nginx-cant-connect-to-uwsgi-socket-with-correct-permissions](http://superuser.com/questions/809527/nginx-cant-connect-to-uwsgi-socket-with-correct-permissions)",
    "active": true,
    "views": 425,
    "create_at": "2015-01-27T12:00:45Z",
    "update_at": "2017-01-19T02:00:49.704Z",
    "tags": [
      2,
      1,
      6
    ]
  }
},
{
  "model": "blog.article",
  "pk": 13,
  "fields": {
    "title": "Entornos virtuales en Python",
    "slug": "entornos-virtuales-en-python",
    "owner": 1,
    "default_tag": 5,
    "image_header": "",
    "body": "La mejor manera de trabajar con Python es con un ``virtualenv``, virtualenv a\u00edsla los entornos pudiendo tener versiones diferentes de paquetes Python.\r\n\r\nEs posible tener un entorno Django con Django 1.6 y otro entorno con Django 1.7 sin preocuparnos de estar instalando y desinstalando cada vez que estemos trabajando con un proyecto.\r\n\r\nEl proceso para crear entornos es el siguiente.\r\n\r\nCrear un entorno para el proyecto ``proyecto1`` \r\n\r\n    virtualenv venv\r\n\r\ny ahora, tenemos que acceder a ese entorno\r\n\r\n    source venv/bin/activate\r\n\r\nPara saber que se esta en el entorno, en el shell, se puede ver algo as\u00ed\r\n\r\n    (venv)snicoper@.....\r\n\r\nEntre los par\u00e9ntesis, nos dice que entorno estamos usando, pero este proceso, aunque es bueno, hay una manera mejor de acceder/crear entornos y no nos preocupamos donde ponerlos\r\n\r\n``virtualenvwrapper`` es un \u00bfenvoltorio? para hacernos la vida mas f\u00e1cil, para ello vamos a instalarlo en Fedora (aunque en Centos, es igual)\r\n\r\nEsta es la manera que lo hago con Fedora y Python 3, para Centos y/o Python 2, sera muy parecido, excepto que en Centos se ha compilar Python 3.\r\n\r\nInstalaci\u00f3n de virtualenv y virtualenvwrapper\r\n\r\n    sudo pip3 install virtualenv virtualenvwrapper\r\n\r\nCrear el directorio ``.virtualenvs`` en el ``$HOME``\r\n\r\n    mkdir ~/.virtualenvs\r\n\r\nHay es donde los entornos ser\u00e1n creados por virtualenvwrapper\r\n\r\nAhora, cada que abramos al terminal y nos cargue las variables de entorno, editamos ``~/.bashrc``\r\n\r\n    vim ~/.bashrc\r\n\r\ny a\u00f1adimos las siguientes lineas\r\n\r\n    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\r\n    export WORKON_HOME=$HOME/.virtualenvs\r\n    source /usr/bin/virtualenvwrapper.sh\r\n\r\ny las cargamos con ``source ~/.bashrc``\r\n\r\nCreamos un entorno virtual de prueba\r\n\r\n    mkvirtualenv default\r\n\r\nCuando lo creamos, pod\u00e9is ver que ya pone ``(default)`` en el shell, para salir solo hay que poner ``deactivate``.\r\n\r\nAhora ya podemos usar pip y todo lo que instalemos, solo estara disponible para ese entorno.\r\n\r\nPodemos tener tantos entornos como queramos, con diferentes paquetes :)\r\n\r\nAqu\u00ed algunos comandos \u00fatiles.\r\n\r\n* mkvirtualenv // Crea un nuevo virtualenv\r\n* rmvirtualenv // Elimina un virtualenv existente\r\n* workon // Cambia el actual virtualenv\r\n* deactivate // Desactivar virtualenv\r\n* lsvirtualenv // Listar virtualenvs\r\n\r\n---\r\n\r\n**Fuentes**\r\n\r\n* [https://pypi.python.org/pypi/virtualenv](https://pypi.python.org/pypi/virtualenv)\r\n* [https://pypi.python.org/pypi/virtualenvwrapper/](https://pypi.python.org/pypi/virtualenvwrapper/)",
    "active": true,
    "views": 203,
    "create_at": "2015-01-27T13:32:45Z",
    "update_at": "2017-01-19T02:00:49.688Z",
    "tags": [
      1,
      5
    ]
  }
},
{
  "model": "blog.article",
  "pk": 14,
  "fields": {
    "title": "Logrotate, comprimir archivos log peri\u00f3dicamente",
    "slug": "logrotate-comprimir-archivos-log-periodicamente",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "La herramienta **logrotate** est\u00e1 dise\u00f1ada para simplificar la administraci\u00f3n de los archivos de registro en un sistema que genera una gran cantidad de archivos de registro. **Logrotate** permite la rotaci\u00f3n, compresi\u00f3n autom\u00e1tica, eliminaci\u00f3n y env\u00edo de archivos de registro por correo. **Logrotate** se puede configurar para manejar un archivo de registro diario, semanal, mensual o cuando el archivo de registro llega a cierto tama\u00f1o.\r\n\r\nEl archivo principal de **logrotate** se encuentra en ``/etc/logrotate.conf`` y el directorio donde guarda las configuraciones de los diferentes programas que generan logs en ``/etc/logrotate.d/``.  \r\nCada archivo es una configuraci\u00f3n que se ejecuta dependiendo de las opciones que pongamos en el archivo.\r\n\r\nPor ejemplo, para el ejemplo del otro d\u00eda [Nginx gunicorn Django en Fedora/Centos7](http://www.snicoper.com/blog/article/nginx-gunicorn-django-en-fedoracentos7/), genera un archivo de registro en ``~/webapps/examplecom/logs/gunicorn.log``, ese archivo, dependiendo del trafico del sitio, puede llegar a ser muy grande y logrotate puede ayudarnos a partir ese archivo, comprimir y/o enviarlo por email.\r\n\r\nSeguir\u00e9 con el ejemplo de **gunicorn** y **nginx**, lo primero es crear un archivo de configuraci\u00f3n en ``/etc/logrotate.d/``.\r\n\r\n    su\r\n    vim /etc/logrotate.d/gunicorn\r\n\r\nY ponemos una simple configuraci\u00f3n:\r\n\r\n    /var/log/gunicorn/*log {\r\n        create 0644 snicoper snicoper\r\n        daily\r\n        rotate 10\r\n        missingok\r\n        notifempty\r\n        compress\r\n    } \r\n\r\nAcordaros de cambiar el **usuario/grupo**\r\n\r\nLo guardamos y probamos si funciona con el siguiente comando.\r\n\r\n    logrotate -f /etc/logrotate.d/gunicorn\r\n\r\nSi mir\u00e1is en ``/var/log/gunicorn/`` ver\u00e9is que hay un archivo ``.gz`` ``gunicorn.log.1.gz``, que es el archivo log que hab\u00eda, lo ha comprimido y ha creado otro con el mismo nombre para seguir insertando registros.\r\n\r\nAqu\u00ed hay algunas opciones mas que se pueden poner **(sacado de man logrotate)**:\r\n\r\n* **compress**: Las versiones antiguas de los archivos de registro se comprimen con gzip.\r\n* **rotate**: Los  archivos  de registro se cambian <count> veces antes de ser eliminados  o  enviados  a  la  direcci\u00f3n  especificada  en  una directiva  mail.  Si  count  es  0,  las  versiones  antiguas se eliminar\u00e1n en vez de ser cambiadas.\r\n* **daily**: Los archivos de registro se cambian diariamente.\r\n* **notifempty**:No  rota  el  archivo  de  registro si est\u00e1 vac\u00edo (esto anula la opci\u00f3n ifempty).\r\n* **create (mode owner group)**:  Se crea el archivo de registro (con el mismo nombre del  archivo de  registro  que  se acaba de rotar) inmediatamente despu\u00e9s del cambio (antes de que se  ejecute  el  script  postrotate).  mode especifica  el  modo  del archivo de registro en octal (al igual que chmod (2)), owner especifica el nombre del  usuario  al  que pertenecer\u00e1  el archivo de registro, y group especifica el grupo al que pertenecer\u00e1 el archivo. Se puede omitir cualquiera de los atributos  del  archivo  de  registro,  en  cuyo  caso, el nuevo archivo usar\u00e1 los valores  del  archivo  antiguo  para  aquellos atributos  que  se  hayan  omitido.  Esta opci\u00f3n se puede anular usando la opci\u00f3n nocreate.\r\n* **postrotate/endscript**: Las l\u00edneas entre postrotate y endscript (ambas deben aparecer en l\u00edneas por separado) se ejecutan  una  vez  que  el  archivo  de registro  ha  sido rotado. Estas directivas s\u00f3lo pueden aparecer dentro de una definici\u00f3n de archivo de registro.\r\n\r\n---\r\n\r\n**Fuentes**\r\n\r\n* man logrotate\r\n* [http://manpages.ubuntu.com/manpages/lucid/es/man8/logrotate.8.html](http://manpages.ubuntu.com/manpages/lucid/es/man8/logrotate.8.html)\r\n* [https://www.linode.com/docs/uptime/logs/use-logrotate-to-manage-log-files](https://www.linode.com/docs/uptime/logs/use-logrotate-to-manage-log-files)\r\n* [http://linuxconfig.org/logrotate](http://linuxconfig.org/logrotate)",
    "active": true,
    "views": 361,
    "create_at": "2015-01-28T15:53:23Z",
    "update_at": "2017-01-19T02:00:49.663Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 15,
  "fields": {
    "title": "django-haystack y Woosh",
    "slug": "django-haystack-y-woosh",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Un motor de b\u00fasqueda es un componente clave en todos los sitios web que los usuarios van a usar b\u00fasquedas de palabras clave y encontrar los datos que se ajuste a sus necesidades. Esa es la raz\u00f3n por la que proporciona una funci\u00f3n eficiente para desencadenar esa tarea es algo que tienes que preocuparte profundamente. Un potente motor de b\u00fasqueda que har\u00e1 exactamente lo que quieres puede ser a veces un poco dif\u00edcil de dise\u00f1ar. Afortunadamente, ya hay muchas soluciones disponibles que har\u00e1n el trabajo principal para nosotros y yo voy a mostrar uno de ellos, c\u00f3mo configurar un motor de b\u00fasqueda completo con haystack y Whoosh en Django.\r\n\r\nEste es el \u00e1rbol de directorios y archivos del proyecto de ejemplo:\r\n\r\n    .\r\n    \u251c\u2500\u2500 manage.py\r\n    \u2514\u2500\u2500 mi_proyecto\r\n        \u251c\u2500\u2500 __init__.py\r\n        \u251c\u2500\u2500 settings.py\r\n        \u251c\u2500\u2500 urls.py\r\n        \u2514\u2500\u2500 wsgi.py\r\n\r\n\r\nVamos a instalar los requerimientos para la practica.\r\n\r\n    pip install whoosh django-haystack\r\n\r\nLa configuraci\u00f3n en ``settings.py``, es solo a\u00f1adir ``haystack`` en ``INSTALLED_APPS``\r\n\r\n    INSTALLED_APPS = (\r\n        # ...\r\n        'haystack',\r\n    )\r\n\r\nY decirle que backend usara para las b\u00fasquedas, en este caso, usaremos ``whoosh``, pero puedes usar varios, (ver la documentaci\u00f3n de haystack en las fuentes).\r\n\r\nEn ``settings.py``, al final a\u00f1adimos el backend\r\n\r\n    HAYSTACK_CONNECTIONS = {\r\n        'default': {\r\n            'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',\r\n            'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),\r\n        }\r\n    }\r\n\r\nYo creo la directorio que tendr\u00e1 las recopilaciones de b\u00fasqueda en el mismo directorio donde se encuentra ``settings.py``, el directorio ``whoosh_index`` hay que crearlo.\r\n\r\n    mkdir mi_proyecto/whoosh_index\r\n\r\nQuedando asi\r\n\r\n    .\r\n    \u251c\u2500\u2500 manage.py\r\n    \u2514\u2500\u2500 mi_proyecto\r\n        \u251c\u2500\u2500 __init__.py\r\n        \u251c\u2500\u2500 settings.py\r\n        \u251c\u2500\u2500 urls.py\r\n        \u251c\u2500\u2500 whoosh_index\r\n        \u2514\u2500\u2500 wsgi.py\r\n\r\nCreamos una aplicaci\u00f3n para el ejemplo, el t\u00edpico blog con un modelo ``Article``, lo mas simple posible para claridad de la practica.\r\n\r\n    ./manage.py startapp blog\r\n\r\nEl modelo\r\n\r\n    # blog/models.py\r\n\r\n    from django.db import models\r\n\r\n\r\n    class Article(models.Model):\r\n        body = models.TextField()\r\n        title = models.CharField(max_length=100)\r\n        create_at = models.DateTimeField(auto_now_add=True)\r\n\r\nA\u00f1adir a ``INSTALLED_APPS`` la aplicaci\u00f3n ``search``\r\n\r\n    INSTALLED_APPS = (\r\n        # ...\r\n        'haystack',\r\n        'blog',\r\n    )\r\n\r\n### Crear SearchIndexes\r\n\r\nCreamos un directorio en la ra\u00edz del proyecto, llamado ``search`` y dentro un archivo que sera el encargado de indexar los datos del modelo ``Article``, por convenci\u00f3n el archivo se llamara ``search_indexes.py`` y le editamos lo siguiente:\r\n\r\n    from haystack import indexes\r\n\r\n    from blog.models import Article\r\n\r\n\r\n    class ArticleIndex(indexes.SearchIndex, indexes.Indexable):\r\n\r\n        \"\"\"\r\n        B\u00fasquedas en blog.Article\r\n        \"\"\"\r\n        text = indexes.CharField(document=True, use_template=True)\r\n        title = indexes.CharField(model_attr='title')\r\n        create_at = indexes.CharField(model_attr='create_at')\r\n\r\n        def get_model(self):\r\n            return Article\r\n\r\n        def index_queryset(self, using=None):\r\n            \"\"\"\r\n            Used when the entire index for model is updated.\r\n            \"\"\"\r\n            return self.get_model().objects.all()\r\n\r\nCada ``SearchIndex`` requiere exista un campo (y s\u00f3lo uno) con ``document=True``. Esto indica a  ``haystack`` y el motor de b\u00fasqueda, qu\u00e9 campo es el campo principal donde buscar.\r\n\r\nPara decirle a Python que es un modulo, a\u00f1adir ``__init__.py`` en la ra\u00edz de ``search``\r\n\r\nAhora, creamos dentro de ``search`` el directorio ``indexes/templates`` y dentro, otro directorio con cada aplicaci\u00f3n que use una b\u00fasqueda.\r\n\r\n    mkdir -p search/templates/indexes/blog\r\n\r\nDentro de ``search/templates/indexes/blog``, creamos un archivo de texto, que sera el que construya el template con los datos obtenidos.\r\n\r\n    touch search/indexes/blog/article_text.txt\r\n\r\nY le a\u00f1adimos\r\n\r\n    {{ object.title }}\r\n    {{ object.body }}\r\n\r\nAhora, creamos el template para ver los resultados en el navegador, para ello, creamos en ``search/templates/search/`` el archivo ``search_article.html`` con el siguiente c\u00f3digo:\r\n\r\n    {% extends 'base.html' %}\r\n\r\n    {% block content %}\r\n        <h2>Search</h2>\r\n\r\n        <form method=\"get\" action=\".\">\r\n            <table>\r\n                {{ form.as_table }}\r\n                <tr>\r\n                    <td>&nbsp;</td>\r\n                    <td>\r\n                        <input type=\"submit\" value=\"Search\">\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n\r\n            {% if query %}\r\n                <h3>Results</h3>\r\n\r\n                {% for result in page.object_list %}\r\n                    <p>\r\n                        <a href=\"{{ result.object.get_absolute_url }}\">{{ result.object.title }}</a>\r\n                    </p>\r\n                {% empty %}\r\n                    <p>No results found.</p>\r\n                {% endfor %}\r\n\r\n                {% if page.has_previous or page.has_next %}\r\n                    <div>\r\n                        {% if page.has_previous %}<a href=\"?q={{ query }}&amp;page={{ page.previous_page_number }}\">{% endif %}&laquo; Previous{% if page.has_previous %}</a>{% endif %}\r\n                        |\r\n                        {% if page.has_next %}<a href=\"?q={{ query }}&amp;page={{ page.next_page_number }}\">{% endif %}Next &raquo;{% if page.has_next %}</a>{% endif %}\r\n                    </div>\r\n                {% endif %}\r\n            {% else %}\r\n                {# Show some example queries to run, maybe query syntax, something else? #}\r\n            {% endif %}\r\n        </form>\r\n    {% endblock %}\r\n\r\n### Configurar la vista\r\n\r\nA\u00f1adir el ``SearchView`` al ``URLconf``, para eso, creamos dentro de ``search`` el archivo ``urls.py`` con el siguiente c\u00f3digo.\r\n\r\n    from django.conf.urls import patterns, url\r\n\r\n    from haystack.query import SearchQuerySet\r\n    from haystack.views import SearchView\r\n\r\n    sqs = SearchQuerySet().order_by('-likes')\r\n\r\n    urlpatterns = patterns(\r\n        'haystack.views',\r\n\r\n        # Busqueda en los art\u00edculos\r\n        # /search/*\r\n        url(\r\n            regex=r'^$',\r\n            view=SearchView(searchqueryset=sqs, template='search/search_template.html'),\r\n            name='search.articles')\r\n    )\r\n\r\nY en el ``urls.py`` principal, a\u00f1adir el siguiente c\u00f3digo:\r\n\r\n    # /search/*\r\n    urlpatterns = patterns(\r\n\r\n        # ...\r\n        url(\r\n            regex=r'^search/',\r\n            view=include('search.urls')),\r\n    )\r\n\r\nAl final, el \u00e1rbol de ``search`` es el siguiente:\r\n\r\n    .\r\n    \u251c\u2500\u2500 __init__.py\r\n    \u251c\u2500\u2500 search_indexes.py\r\n    \u251c\u2500\u2500 templates\r\n    \u2502   \u2514\u2500\u2500 search\r\n    \u2502       \u251c\u2500\u2500 indexes\r\n    \u2502       \u2502   \u2514\u2500\u2500 blog\r\n    \u2502       \u2502       \u2514\u2500\u2500 article_text.txt\r\n    \u2502       \u2514\u2500\u2500 search_article.html\r\n    \u2514\u2500\u2500 urls.py\r\n\r\nTambi\u00e9n a\u00f1adimos ``search`` en ``INSTALLED_APPS`` del ``settings.py``\r\n\r\n    INSTALLED_APPS = (\r\n        # ...\r\n        'haystack',\r\n        'blog',\r\n        'search',\r\n    )\r\n\r\nAhora hay que indexar las noticias con ``create_index``\r\n\r\n    ./manage.py create_index\r\n\r\nY despu\u00e9s, cada vez que se a\u00f1ade un nuevo articulo, se ha de actualizar\r\n\r\n    ./manage.py update_index\r\n\r\nPudiendo a\u00f1adir este ultimo comando a ``cron``\r\n\r\n---\r\n\r\n**Fuentes:**\r\n\r\n* [http://django-haystack.readthedocs.org/en/latest/toc.html](http://django-haystack.readthedocs.org/en/latest/toc.html)\r\n* [https://pythonhosted.org/Whoosh/](https://pythonhosted.org/Whoosh/)",
    "active": true,
    "views": 396,
    "create_at": "2015-02-01T12:49:04Z",
    "update_at": "2017-01-19T02:00:49.644Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 16,
  "fields": {
    "title": "Bind Chroot en Fedora/Centos",
    "slug": "bind-chroot-en-fedoracentos",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "**Bind** es un servidor [DNS](http://es.wikipedia.org/wiki/Domain_Name_System) que nos facilita la vida para la resoluci\u00f3n de nombres.\r\nSeria dif\u00edcil recordar todas las IPs de los sitios que visitamos en la red y/o intranet y eso es lo que hace Bind, poniendo un dominio, el servidor resuelve el nombre asociado a una IP y nos dirige a la IP de la maquina.\r\n\r\n**Chroot** de la wikipedia:\r\n\r\n> chroot en los sistemas operativos derivados de Unix, es una operaci\u00f3n que invoca un proceso, cambiando para este y sus hijos el directorio ra\u00edz del sistema. \"chroot\" puede referirse a la llamada de sistema chroot(2) o al programa ejecutable chroot(8). Com\u00fanmente, el entorno virtual creado por chroot a partir de la nueva ra\u00edz del sistema se conoce como \"jaula chroot\".\r\n\r\nEste peque\u00f1o manual es extremadamente simple y funciona para una red local, para profundizar mas, es necesario entender bien muchos temas de red, entre otros.\r\n\r\nLa instalaci\u00f3n es simple (como siempre).\r\n\r\n    su\r\n\r\n    yum install bind-chroot bind -y\r\n\r\nCopiar archivos de ejemplo.\r\n\r\n    # Fedora\r\n    cp -R /usr/share/doc/bind/sample/var/named/* /var/named/chroot/var/named/\r\n\r\n    # Centos 7\r\n    cp -R /usr/share/doc/bind-9.9.4/sample/var/named/* /var/named/chroot/var/named/\r\n\r\nCrear archivos y directorios en ``/var/named/chroot/var/named/``\r\n\r\n    touch /var/named/chroot/var/named/data/cache_dump.db\r\n    touch /var/named/chroot/var/named/data/named_stats.txt\r\n    touch /var/named/chroot/var/named/data/named_mem_stats.txt\r\n    touch /var/named/chroot/var/named/data/named.run\r\n    mkdir /var/named/chroot/var/named/dynamic\r\n    touch /var/named/chroot/var/named/dynamic/managed-keys.bind\r\n\r\nCambiar propietario los directorios ``/var/named/chroot/var/named/*``\r\n\r\n    chown -R named:named /var/named/chroot/var/named/\r\n\r\nA\u00f1adir configuraci\u00f3n en ``/etc/sysconfig/named``\r\n\r\n    echo 'OPTIONS=\"-4\"' >> /etc/sysconfig/named\r\n\r\nCopiar el archivo de ``named.conf``\r\n\r\n    cp -p /etc/named.conf /var/named/chroot/etc/named.conf\r\n\r\nEditar la configuraci\u00f3n de ``named.conf``\r\n\r\n    vim /var/named/chroot/etc/named.conf\r\n\r\n``listen-on port..``\r\n\r\n    listen-on port 53 { 127.0.0.1; 192.168.1.0/24; };\r\n\r\nAntes de ``include \"/etc/named.rfc1912.zones\";`` creo las zonas.\r\n\r\n    zone \"example.com\" {\r\n        type master;\r\n        file \"example.com.zone\";\r\n    };\r\n\r\n    zone \"2.168.192.in-addr.arpa\" IN {\r\n            type master;\r\n            file \"192.168.1.zone\";\r\n    };\r\n\r\nGuardar y salir, ahora creamos el archivo de zona para ``example.com``\r\n\r\n    vim /var/named/chroot/var/named/example.com.zone\r\n\r\n    ;\r\n    ;       Addresses and other host information.\r\n    ;\r\n    $TTL 604800\r\n    @       IN      SOA     example.com. hostmaster.example.com. (\r\n                                   2013042201      ; Serial\r\n                                   43200      ; Refresh\r\n                                   3600       ; Retry\r\n                                   3600000    ; Expire\r\n                                   2592000 )  ; Minimum\r\n\r\n    ;       Define the nameservers and the mail servers\r\n\r\n    @               IN      NS      ns1.example.com.\r\n    @               IN      A       192.168.1.100\r\n    @               IN      MX      10 mail.example.com.\r\n\r\n    mail            IN      A       192.168.1.100\r\n    ns1             IN      A       192.168.1.100\r\n    www             IN      CNAME   example.com.\r\n\r\nY creamos la zona inversa\r\n\r\n    vim /var/named/chroot/var/named/192.168.1.zone\r\n\r\n    ;\r\n    ;       Addresses and other host information.\r\n    ;\r\n    $TTL 86400\r\n    @       IN      SOA     example.com. hostmaster.example.com. (\r\n                                   2013042201      ; Serial\r\n                                   43200      ; Refresh\r\n                                   3600       ; Retry\r\n                                   3600000    ; Expire\r\n                                   2592000 )  ; Minimum\r\n\r\n                IN      NS      ns1.example.com.\r\n\r\n    100         IN      PTR     ns1.example.com.\r\n\r\nA\u00f1adir servicio a Firewalld e iniciar servicio\r\n\r\n    firewall-cmd --permanent --zone=public --add-service=dns\r\n    firewall-cmd --reload\r\n    systemctl start named-chroot.service\r\n    systemctl enable named-chroot.service\r\n    systemctl status named-chroot.service\r\n\r\nSELinux\r\n\r\n    setsebool -P named_write_master_zones 1\r\n\r\nEs importante en el archivo de configuraci\u00f3n de la interface de red, cambiar/poner algunos datos.\r\n\r\n    vim /etc/sysconfig/network-scripts/ifcfg-INTERFACE\r\n\r\n    BOOTPROTO=none\r\n    PEERDNS=no\r\n    DOMAIN=\"example.com\"\r\n    IPADDR=192.168.1.100\r\n    NETMASK=255.255.255.0\r\n    GATEWAY=192.168.1.1\r\n    DNS1=127.0.0.1\r\n    DNS2=8.8.8.8\r\n    DNS3=8.8.4.4\r\n\r\nReiniciamos ``NetworkManager``\r\n\r\n    systemctl restart NetworkManager.service",
    "active": true,
    "views": 260,
    "create_at": "2015-02-04T02:01:56Z",
    "update_at": "2017-01-19T02:00:49.621Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 17,
  "fields": {
    "title": "Instalaci\u00f3n de Python 3.4.x en Centos 7",
    "slug": "instalacion-de-python-34x-en-centos-7",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "Supongo que estas notas valen para Centos 6.x y Fedora X, yo lo he probado en Centos 7 y por eso el titulo de la entrada.\r\n\r\n#### Pre requisitos\r\n\r\n    sudo yum install -y kernel-devel kernel-headers gcc cpp make\r\n    sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel\r\n\r\nEditar ``/etc/ld.so.conf`` para a\u00f1adir bibliotecas compartidas.\r\n\r\n    sudo vim /etc/ld.so.conf\r\n\r\nA\u00f1adimos la siguiente linea:\r\n\r\n    /usr/local/lib\r\n\r\nDescargar fuentes y compilar:\r\n\r\n    wget https://www.python.org/ftp/python/3.4.2/Python-3.4.2.tgz\r\n    tar -zxvf Python-3.4.2.tgz\r\n    cd Python-3.4.2\r\n\r\n    ./configure --prefix=/usr/local --enable-shared LDFLAGS=\"-Wl,-rpath /usr/local/lib\"\r\n    make\r\n    sudo make altinstall\r\n\r\nPara usar pip:\r\n\r\n    su\r\n    pip3.4 install paquete\r\n\r\nListo :)\r\n\r\n---\r\n\r\n**Fuentes**\r\n\r\n* [http://apuntes.snicoper.com/linux/python/compilar_python_34_centos.html](http://apuntes.snicoper.com/linux/python/compilar_python_34_centos.html)",
    "active": true,
    "views": 253,
    "create_at": "2015-02-04T10:01:23Z",
    "update_at": "2017-01-19T02:00:49.601Z",
    "tags": [
      1,
      5
    ]
  }
},
{
  "model": "blog.article",
  "pk": 18,
  "fields": {
    "title": "Ruby y Rails en Fedora",
    "slug": "ruby-y-rails-en-fedora",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "Hoy he jugado un poco con Ruby on Rails y e tenido que instalar tanto Ruby como Rails en Fedora.\r\n\r\nBasicamente dejo las instrucciones de los pasos que he seguido, aunque hay poco que comentar :).\r\n\r\n### Pre requisitos\r\n\r\n    sudo dnf install gcc-c++ patch readline readline-devel zlib zlib-devel \\\r\n        libyaml-devel libffi-devel openssl-devel make \\\r\n        bzip2 autoconf automake libtool bison iconv-devel\r\n\r\n### RVM\r\n\r\n    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\r\n\r\n    \\curl -sSL https://get.rvm.io | bash -s stable\r\n\r\n### Editar bashrc\r\n\r\nA\u00f1adir en ``~/.bashrc``\r\n\r\n    # Load RVM into a shell session *as a function*\r\n    [[ -s \"$HOME/.rvm/scripts/rvm\" ]] && source \"$HOME/.rvm/scripts/rvm\"\r\n\r\nRecargar ``~/.bashrc``\r\n\r\n    source ~/.bashrc\r\n\r\n### Ruby\r\n\r\n    rvm install ruby-2.2.0\r\n    rvm use ruby-2.2.0 --default\r\n\r\n    ruby -v\r\n\r\n### Rails\r\n\r\n    gem install rails\r\n\r\n    rails -v",
    "active": true,
    "views": 246,
    "create_at": "2015-02-09T20:49:08Z",
    "update_at": "2017-01-19T02:00:49.580Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 19,
  "fields": {
    "title": "PHP y Nginx en Windows",
    "slug": "php-y-nginx-en-windows",
    "owner": 1,
    "default_tag": 8,
    "image_header": "",
    "body": "Esta es una instalaci\u00f3n b\u00e1sica de Nginx y PHP en windows, que, aunque hay maneras mas simples con http://wpn-xm.org/, a mi siempre me ha gustado mas hacerlo por separado y para practicas, pues ya me vale...\r\n\r\nNo toca configuraciones de base de datos, pero es elegir la db, instalarla y descomentar la linea en ``php.ini`` seg\u00fan la db elegida.\r\n\r\nAl l\u00edo...\r\n\r\n### Descargar paquetes necesarios\r\n\r\nDescargar [php](http://windows.php.net/download) Non Thread Safe\r\nDescargar [nginx](http://nginx.org/)\r\nDescargar [NSSM (Non-Sucking Service Manager)](https://nssm.cc/)\r\n\r\nA\u00f1adir al ``PATH``\r\n\r\n    C:\\nginx;C:\\php;C:\\nssm\\win64;\r\n\r\n### Configuraci\u00f3n de Nginx\r\n\r\nEditar ``C:\\nginx\\conf\\nginx.conf``\r\n\r\n    http {\r\n        # ...\r\n\r\n        # A\u00f1adir al final de http { la siguiente linea\r\n\r\n        include C:/nginx/conf/vhosts/*.conf;\r\n    }\r\n\r\nCrear directorio ``C:/nginx/conf/vhosts``, es donde estar\u00e1n los host virtuales de nginx. Crear en el directorio de usuario ``~/Projects/www``\r\n\r\nCrear ``C:/nginx/conf/vhosts/snicoper.dev.conf`` y a\u00f1adir:\r\n\r\n    server {\r\n        listen 80;\r\n        server_name snicoper.dev;\r\n        access_log logs/snicoper.dev-access.log;\r\n        error_log logs/snicoper.dev-error.log;\r\n        root C:/Users/snicoper/Projects/www;\r\n\r\n        location / {\r\n            index index.html index.htm index.php;\r\n        }\r\n\r\n        location ~* \\.(jpg|jpeg|gif|png|css|js|ico|xml)$ {\r\n            access_log        off;\r\n            log_not_found     off;\r\n            expires           360d;\r\n        }\r\n\r\n        # Si quiero que se vean los archivos y directorios cambiar a on\r\n        autoindex on;\r\n\r\n        location ~ \\.php$ {\r\n            fastcgi_pass  127.0.0.1:9000;\r\n            fastcgi_index index.php;\r\n            fastcgi_param SCRIPT_FILENAME C:/Users/snicoper/Projects/www$fastcgi_script_name;\r\n        }\r\n    }\r\n\r\n### Configuraci\u00f3n de php\r\n\r\nEntrar en ``C:\\php`` copiar/pegar ``php.ini-development`` y renombrarlo a ``php.ini``\r\n\r\nEditar ``C:\\php\\php.ini``\r\n\r\n    # Linea 736, descomentar\r\n    extension_dir = \"ext\"\r\n\r\n    # Linea 927, descomentar y a\u00f1adir zona horaria\r\n    date.timezone = Europe/Madrid\r\n\r\n    # A partir de la linea 878, descomentar las extensiones necesarias\r\n\r\n### Configuraci\u00f3n de Nssm\r\n\r\nEntrar en una terminal (S\u00edmbolo del sistema) como administrador:\r\n\r\n    nssm install nginxd\r\n\r\n    # Path:\r\n    C:\\nginx\\nginx.exe\r\n\r\n    # Startup directory:\r\n    C:\\nginx\r\n\r\n    # Pulsar 'Edit service'\r\n\r\n    nssm install phpcgid\r\n\r\n    # Path:\r\n    C:\\php\\php-cgi.exe\r\n\r\n    # Startup directory:\r\n    C:\\php\r\n\r\n    # Arguments:\r\n    -b 127.0.0.1:9000\r\n\r\n    # Pulsar 'Edit service'\r\n\r\nIniciar servicios\r\n\r\n    nssm start nginxd\r\n    nssm start phpcgid\r\n\r\nPara ver el resto de comandos escribir solo nssm, al iniciar se los servicios se iniciaran solos.\r\n\r\n### XDebug\r\n\r\nAbrimos la terminal y ejecutamos:\r\n\r\n    php -i > phpini.txt\r\n\r\nAbrimos el archivo ``phpini.txt`` y copiamos su contenido. Ahora vamos a [Xdebug](http://xdebug.org/wizard.php) ,lo pegamos en el textarea y le damos al bot\u00f3n ``Analyse my phpinfo() output``.\r\n\r\nNos mostrara que descarga tenemos que hacer.\r\n\r\nDescargar el archivo y renombrar a ``php_xdebug.dll``, despu\u00e9s, copiar el archivo en ``C:\\php\\ext``, por ultimo editar el archivo ``C:\\php\\php.ini`` y a\u00f1adir al final:\r\n\r\n    zend_extension = C:\\php\\ext\\php_xdebug.dll\r\n\r\n### Composer\r\n\r\n[Descargar composer](https://getcomposer.org/download/) y seguir las instrucciones del instalador, la \u00fanica nota es que en el ``php.ini`` se ha de descomentar la linea ``extension=php_openssl.dll`` antes de comenzar la instalaci\u00f3n.",
    "active": true,
    "views": 411,
    "create_at": "2015-04-12T16:38:52Z",
    "update_at": "2017-01-19T02:00:49.559Z",
    "tags": [
      6,
      8,
      11
    ]
  }
},
{
  "model": "blog.article",
  "pk": 20,
  "fields": {
    "title": "PHP y Nginx en Linux",
    "slug": "php-y-nginx-en-linux",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "Hacia mucho tiempo que no instalaba PHP en Linux y hoy para probar un poco laravel he instalado un peque\u00f1o entorno para pruebas que comparto aqu\u00ed.\r\n\r\nEsto es lo que he instalado y configurado\r\n\r\n* Nginx\r\n* PHP\r\n* Configuracion de desarrollo de ``php.ini``\r\n* php-fpm\r\n* Xdebug\r\n* Composer\r\n* Conector para postgresql y/o mariadb\r\n* Crear un host virtual en ``~/projects/php``\r\n* Puertos y SELinux\r\n\r\nEstas instrucciones valen tanto para Fedora como para Centos, lo \u00fanico que si se quiere tener las ultimas versiones en Centos, se han de instalar los repos de REMI y usar el comando ``yum \u2013enablerepo=remi,remi-phpXX`` donde ``XX`` es la versi\u00f3n de PHP, ejemplo: ``yum \u2013enablerepo=remi,remi-php56``.\r\n\r\n### Instalaci\u00f3n Nginx\r\n\r\n    dnf install Nginx\r\n\r\nEstablecer como servicio e iniciar\r\n\r\n    systemctl start nginx.service\r\n    systemctl enable nginx.service\r\n\r\nLuego volveremos a Nginx para crear un host virtual.\r\n\r\n### Instalaci\u00f3n PHP\r\n\r\n    dnf install -y php php-gd php-pdo php-mcrypt php-cli php-opcache\r\n\r\nPara ver todos los paquetes de php, usar:\r\n\r\n    dnf search php-\r\n\r\nCopiar la plantilla ``php.ini-development``, si se quiere la de producci\u00f3n usar ``php.ini-production``.\r\n\r\n    cp /usr/share/doc/php-common/php.ini-development /etc/php.ini\r\n\r\nEn Centos, aqu\u00ed varia un poco, se ha de poner la versi\u00f3n que se ha instalado, por ejemplo:\r\n\r\n    cp /usr/share/doc/php-common-5.5.14/php.ini-development /etc/php.ini\r\n\r\n#### Configruacion de php.ini\r\n\r\n    vim /etc/php.ini\r\n\r\nUnicamente hay que descomentar ``;date.timezone =`` y poner una [regi\u00f3n valida](http://php.net/manual/es/timezones.php)\r\n\r\n    date.timezone = Europe/Madrid\r\n\r\nSi se quiere habilitar/configurar ``opcache`` buscar las siguientes linea, descomentar y poner un valor:\r\n\r\n    opcache.enable=1\r\n    opcache.enable_cli=1\r\n    opcache.memory_consumption=128\r\n    opcache.interned_strings_buffer=8\r\n    opcache.max_accelerated_files=4000\r\n    opcache.revalidate_freq=60\r\n    opcache.fast_shutdown=1\r\n\r\n### Instalaci\u00f3n php-fpm\r\n\r\nLa instalaci\u00f3n es muy simple\r\n\r\n    dnf install php-fpm -y\r\n\r\nEstablecer como servicio e iniciar\r\n\r\n    systemctl start php-fpm.service\r\n    systemctl enable php-fpm.service\r\n\r\n### Xdebug\r\n\r\n    dnf install php-pecl-xdebug -y\r\n\r\n    vim /etc/php.d/XX-xdebug.ini\r\n\r\nDonde (XX)-xdebug.ini es un numero, no se si en todos los casos es siempre el mismo (antes esto no lo tenia ^_^) y a\u00f1adir\r\n\r\n    ; Enable xdebug extension module\r\n    zend_extension=/usr/lib64/php/modules/xdebug.so\r\n    xdebug.remote_enable=on\r\n    xdebug.remote_handler=dbgp\r\n    xdebug.remote_host=localhost\r\n    xdebug.remote_port=9090\r\n    xdebug.output_buffering=off\r\n\r\nPongo el puerto ``9090`` por que ``php-fpm`` por defecto usa ``9000``\r\n\r\n### Composer\r\n\r\nSimplemente:\r\n\r\n    curl -s https://getcomposer.org/installer | php\r\n    mv composer.phar /usr/local/bin/composer\r\n\r\n\r\n    # Para actualizar composer\r\n    composer self-update\r\n\r\n### Bases de datos\r\n\r\nEl motor de base de datos es tu eleccion, tanto mariadb como postgresql es muy simple.\r\n\r\n**PostgreSQL**\r\n\r\n    dnf install -y php-pgsql\r\n\r\n    # Opcional\r\n    dnf install -y phpPgAdmin\r\n\r\n    cp /usr/share/phpPgAdmin/conf/config.inc.php-dist /usr/share/phpPgAdmin/conf/config.inc.php\r\n    vim /usr/share/phpPgAdmin/conf/config.inc.php\r\n\r\nBuscar ``$conf['extra_login_security']`` y poner el valor a ``false``\r\n\r\n    $conf['extra_login_security'] = false;\r\n\r\n**MariaDB**\r\n\r\n    dnf install php-mysqlnd\r\n\r\n    # Opcional\r\n    dnf install phpmyadmin\r\n\r\n### Host Virtual\r\n\r\nUsare el directorio personal ``~/projects/php`` para probar que todo funciona.\r\n\r\n    # Como usuario normal\r\n    mkdir -p ~/projects/php\r\n    echo \"<?php phpinfo();\" > ~/projects/php/test.php\r\n\r\nCrear el host virtual en ``/etc/nginx/conf.d/``\r\n\r\n    vim /etc/nginx/conf.d/workspace.local.conf\r\n\r\nA\u00f1adir:\r\n\r\n    server {\r\n        listen 80;\r\n        server_name .workspace.local;\r\n        access_log /var/log/nginx/workspace.local-access.log;\r\n        error_log /var/log/nginx/workspace.local-error.log;\r\n        root /home/snicoper/projects/php;\r\n\r\n        location / {\r\n            index index.html index.htm index.php;\r\n        }\r\n\r\n        location ~* \\.(jpg|jpeg|gif|png|css|js|ico|xml)$ {\r\n            access_log        off;\r\n            log_not_found     off;\r\n            expires           360d;\r\n        }\r\n\r\n        # Si quiero que se vean los archivos y directorios cambiar a on\r\n        autoindex on;\r\n\r\n        location ~ \\.php$ {\r\n            include /etc/nginx/fastcgi_params;\r\n            fastcgi_pass  127.0.0.1:9000;\r\n            fastcgi_index index.php;\r\n            fastcgi_param SCRIPT_FILENAME /home/snicoper/projects/php$fastcgi_script_name;\r\n        }\r\n    }\r\n\r\nCambiar ``snicoper`` por tu nombre de usuario.\r\n\r\nEditar el archivo ``hosts``\r\n\r\n    vim /etc/hosts\r\n\r\n    # A\u00f1adir\r\n    127.0.0.1   workspace.local www.workspace.local\r\n\r\n### Puertos y SELinux\r\n\r\n    setsebool -P httpd_enable_homedirs 1\r\n    setsebool -P httpd_read_user_content 1\r\n    setsebool -P httpd_can_network_connect on\r\n\r\nSi se usa postgresql\r\n\r\n    setsebool -P allow_user_postgresql_connect 1\r\n\r\nSi se crea un host virtual en el home del usuario, es necesario dar permisos ``711`` al directorio del usuario.\r\n\r\n    chmod 711 /home/snicoper\r\n\r\n### Reiniciar todo y probar\r\n\r\n    systemctl restart nginx.service\r\n    systemctl restart php-fpm.service\r\n\r\nEntrar en [http://www.workspace.local](http://www.workspace.local)\r\n\r\n**Listo!!**",
    "active": true,
    "views": 321,
    "create_at": "2015-04-13T14:58:37Z",
    "update_at": "2017-01-19T02:00:49.539Z",
    "tags": [
      1,
      3,
      6,
      9,
      11
    ]
  }
},
{
  "model": "blog.article",
  "pk": 21,
  "fields": {
    "title": "Atom para Python/Django",
    "slug": "atom-para-pythondjango",
    "owner": 1,
    "default_tag": 7,
    "image_header": "",
    "body": "He estado probando Atom como editor de c\u00f3digo y en los \u00faltimos tiempos ha mejorado mucho.\r\n\r\n### Instalaci\u00f3n de Atom\r\n\r\nYo lo tengo instalado en Fedora (22), descargar de [aqu\u00ed](https://atom.io/) y ejecutar.\r\n\r\n    cd /path/hacia/descarga\r\n    sudo dnf install lsb-core-noarch\r\n    sudo rpm -i atom.x86_64.rpm\r\n\r\nEsta es la configuraci\u00f3n que tengo para ``Python/Django``\r\n\r\nUso el theme que viene por defecto, pero instalo [file-icons](https://github.com/DanBrooker/file-icons>)\r\n\r\n    apm install file-icons\r\n\r\n### Python/Django\r\n\r\nEstos son los siguientes plugins que instalo para ``Python/Django``\r\n\r\n    apm install atom-django django-templates\r\n    apm install autocomplete-python\r\n    apm install linter linter-flake8\r\n\r\nEs necesario instalar ``flake8`` en python, yo por defecto tengo [instalado](http://apuntes.snicoper.com/linux/python/instalacion_python_fedora.html) una maquina virtual ``default`` y es la que suelo usar para las practicas, etc.\r\n\r\n    (default) pip install flake8 flake8-docstring\r\n\r\nAhora toca configurar ``autocomplete-python``, vamos a ``Edit > Preferences > Packages > Autocomplete Python``\r\n\r\nEn ``Extra PATH`` ponemos ``/home/snicoper/.virtualenvs/default/lib/python3.4/site-packages`` (modificar la/s rutas), en caso de poner varias, separarlas por `;`\r\n\r\nEn `Path to python directory`, aqui es posible poner la ruta de Python instalado en el sistema o el de una maquina virtual.\r\n\r\n    which python\r\n    which python3\r\n\r\n### Otros\r\n\r\n    apm install Docblockr\r\n    apm install angularjs # Ayuda autocompletado para angularjs\r\n    apm install sort-lines # F5 para ordenar texto seleccionado\r\n    apm install language-restructuredtext\r\n    apm install color-picker # Ctrl+Alt+C\r\n    apm install less-autocompile\r\n    apm install atom-minify\r\n    apm install Untabify # Cambia tabs por spaces al guardar\r\n    apm install git-plus\r\n    apm install atom-bootstrap3 # Ayuda autocompletado para bootstrap\r\n\r\n### Opinion sobre Atom\r\n\r\nEl primer editor que a uno le viene en mente es ``Sublime Text`` y la comparaci\u00f3n con el mismo es inevitable.\r\n\r\nHecho de menos un par de cosas, poder poner un idioma para la correcci\u00f3n de texto de una manera sencilla y poder asignar el ``Grammar`` seg\u00fan el tipo de archivos, pero por todo lo dem\u00e1s, me ha encantado Atom para programar con ``Python/Django`` y lo usare como principal editor durante un tiempo para poder opinar mejor.\r\n\r\n**Edit 19/07/2015**\r\n<hr>\r\nLo he estado usando un tiempo, lo del idioma lo he solucionado, la \u00fanica \"pega\" que le he encontrado, es que el autocompletado es un poco lento en comparaci\u00f3n a sublime, pero por lo dem\u00e1s realmente va bien...\r\n\r\nHe modificado mis configuraciones de **Atom** y **Sublime Text**, dejo los links por si a alguien le interesa.\r\n\r\n[Atom](http://apuntes-snicoper.readthedocs.org/es/latest/editors/atom/configuracion.html)\r\n\r\n[Sublime Text](http://apuntes-snicoper.readthedocs.org/es/latest/editors/sublime_text/sublime_text_3.html)",
    "active": true,
    "views": 688,
    "create_at": "2015-06-10T12:15:51Z",
    "update_at": "2017-01-19T02:00:49.517Z",
    "tags": [
      2,
      7
    ]
  }
},
{
  "model": "blog.article",
  "pk": 22,
  "fields": {
    "title": "A\u00f1adir sistema de comentarios disqus",
    "slug": "anadir-sistema-de-comentarios-disqus",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Al principio, cuando cree este Blog, hice un sistema de comentarios exclusivamente para practicar mas con Django. Me inspire en Disqus y la verdad que quede muy contento con el resultado, pero claro, Discus es mucho mas avanzado y hoy lo he cambiado.\r\n\r\nHay 2 maneras (quiz\u00e1 mas) para insertar Discus en Django, una es con el paquete [django-disqus](https://github.com/arthurk/django-disqus) y la otra [Universal code](https://help.disqus.com/customer/portal/articles/472097-universal-embed-code).\r\n\r\nYo eleg\u00ed la segunda opci\u00f3n, [Universal code](https://help.disqus.com/customer/portal/articles/472097-universal-embed-code). Con esta opci\u00f3n, no solo es para Django, si no para cualquier cosa (imagino, que incluso para Sphinx, por ejemplo).\r\n\r\nLo primero, es tener una cuenta de [Disqus](https://disqus.com/), una vez creada la cuenta (si no la tenemos), vamos a [crear una discusi\u00f3n](https://disqus.com/admin/create/). Rellenamos el formulario y tenemos que tener en cuanta el ``unique Disqus URL`` que sera el ``shortname`` (mas adelante lo usaremos).\r\n\r\nPara configurar algunas opciones, en ``admin/settings`` de disqus, vamos a ``https://tu_shortname.disqus.com/admin/settings/``\r\n\r\nAhora, suponiendo que tengamos una app llamada ``blog`` en nuestro sitio Django, creamos dos templates, ``_disqus_num_comments.html`` y ``_disqus_comments.html`` (todo esto es opcional, puedes hacerlo como te de la gana ^_^) y a\u00f1adimos:\r\n\r\n### Mostrar Disqus en cada articulo\r\n\r\n    # my_app/templates/_disqus_comments.html\r\n\r\n    {% if not debug %}\r\n        <div id=\"disqus_thread\"></div>\r\n        <script type=\"text/javascript\">\r\n            /* * * CONFIGURATION VARIABLES * * */\r\n            var disqus_shortname = 'tu_shortname';\r\n            var disqus_identifier = '{{ article.id }}';\r\n            var disqus_title = '{{ article.title }}';\r\n            var disqus_url = window.location.href;\r\n\r\n            /* * * DON'T EDIT BELOW THIS LINE * * */\r\n            (function() {\r\n                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\r\n                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\r\n                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\r\n            })();\r\n        </script>\r\n        <noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\" rel=\"nofollow\">comments powered by Disqus.</a></noscript>\r\n    {% endif %}\r\n\r\nAtenci\u00f3n a las variables de configuraci\u00f3n:\r\n\r\n    /* * * CONFIGURATION VARIABLES * * */\r\n    var disqus_shortname = 'tu_shortname';\r\n    var disqus_identifier = '{{ article.id }}';\r\n    var disqus_title = '{{ article.title }}';\r\n    var disqus_url = window.location.href;\r\n\r\nCambia ``tu_shortname`` por tu ``shortname`` y ``{{ article. }}`` por una variable que contenga los datos del articulo.\r\n\r\nEste plantilla podr\u00eda tenerla donde muestra el articulo, pero para que se vea mas limpio todo, prefiero tenerlo en un archivo de plantilla separado.\r\n\r\nPara a\u00f1adirlo al articulo, simplemente, antes de ``</body>`` o lo mas normal sera un ``{% endblock content %}``, lo incluimos ``{% include 'blog/_disqus_comments.html' %}``\r\n\r\nSi todo ha salido bien, ahora ya mostrara el formulario t\u00edpico de Disqus.\r\n\r\n### Mostrar Numero de art\u00edculos en cada entrada\r\n\r\n    # my_app/templates/_disqus_num_comments.html\r\n\r\n    {% if not debug %}\r\n        <li>\r\n            <span\r\n                class=\"glyphicon glyphicon-comment tool-tip\"\r\n                data-toggle=\"tooltip\"\r\n                data-placement=\"top\"\r\n                title=\"Comentarios\">\r\n            </span>\r\n            <a href=\"{{ article.get_absolute_url }}#disqus_thread\">\r\n                <span class=\"disqus-comment-count\" data-disqus-identifier=\"{{ article.id }}\"></span>\r\n            </a>\r\n        </li>\r\n        <script type=\"text/javascript\">\r\n            /* * * CONFIGURATION VARIABLES * * */\r\n            var disqus_shortname = 'tu_shortname';\r\n\r\n            /* * * DON'T EDIT BELOW THIS LINE * * */\r\n            (function () {\r\n                var s = document.createElement('script'); s.async = true;\r\n                s.type = 'text/javascript';\r\n                s.src = '//' + disqus_shortname + '.disqus.com/count.js';\r\n                (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);\r\n            }());\r\n        </script>\r\n    {% endif %}\r\n\r\nLo \u00fanico que has de cambiar es ``var disqus_shortname = 'tu_shortname';`` por tu shortname :)\r\n\r\nEsta parte, es la que mostrara el numero de comentarios, tal y como hace este Blog debajo del titulo de la entrada.\r\n\r\n<div class=\"alert alert-info\">\r\n    Si te sale en ingles y quieres ponerlo en otro idioma <strong>x Comments</strong> has de ir a <code>https://tu_shortname.disqus.com/admin/settings/</code> y cambiar en la parte que pone <code>Comment Count Link</code>, al igual que toda la parte del formulario y Disqus, si te sale en ingles, m\u00edrate las opciones del link.\r\n</div>\r\n\r\nLo pongo en un archivo de plantilla separado, por que lo utilizo tanto en la pagina principal del Blog, donde se muestran todas las entradas como en la pagina de detalle de la entrada.\r\n\r\nAhora, donde queramos ponerlo, simplemente lo incluimos ``{% include 'blog/_disqus_num_comments.html' %}``.\r\n\r\nAl ponerlo en la lista de art\u00edculos, se ha de llamar dentro de ``{% for ... %}`` y cambiar ``{{ article. }}`` por una variable valida.\r\n\r\n<div class=\"alert alert-info\">\r\n    Encierro los c\u00f3digos con <code>{% if not debug %}</code> para que no me este creando discusiones cuando estoy en local, as\u00ed que si no lo ves, lo mismo es por que estas en local <code>DEBUG = True</code>, simplemente quita el <code>not</code> y luego cuando lo subas a producci\u00f3n lo vuelves a poner, una vez funcione, pocas veces mas deber\u00e1s tocas estas partes de c\u00f3digo cuando est\u00e9s en local.\r\n</div>",
    "active": true,
    "views": 455,
    "create_at": "2015-06-12T00:26:48Z",
    "update_at": "2017-01-19T02:00:49.504Z",
    "tags": [
      2,
      4
    ]
  }
},
{
  "model": "blog.article",
  "pk": 23,
  "fields": {
    "title": "Tutorial Django",
    "slug": "tutorial-django",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "He creado un peque\u00f1o tutorial de Django, no es gran cosa, pero para iniciarse y entender los fundamentos puede ser \u00fatil.\r\n\r\nPuedes ver [aqu\u00ed](http://tutorial-django.readthedocs.org/es/latest/) el tutorial, los archivos del proyecto los puedes descargar de [GitHib](https://github.com/snicoper/tutorial-django-code)\r\n\r\nCualquier duda o sugerencia, ponte en [contacto](http://www.snicoper.com/contact/) con migo.",
    "active": true,
    "views": 240,
    "create_at": "2015-06-17T16:53:08Z",
    "update_at": "2017-01-19T02:00:49.485Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 24,
  "fields": {
    "title": "ASP.NET MVC 6 en Fedora",
    "slug": "aspnet-mvc-6-en-fedora",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "En esta entrada, vamos a crear un peque\u00f1o ejemplo con **ASP.NET MVC 6** en linux (**Fedora**, aunque con **Ubuntu** es exactamente igual) y con [Visual Studio Code](https://code.visualstudio.com/)\r\n\r\nPronto saldr\u00e1 la nueva versi\u00f3n de **Microsoft ASP.NET MVC 6** y sera multiplataforma, donde se podr\u00e1 crear y alojar en linux paginas en **ASP.NET**.\r\n\r\nAunque ha d\u00eda de hoy, ya es posible probarlo, todav\u00eda sigue siendo un dolor de huevos si quieres usar **Entity Framework 7** (EF7), de momento no tiene compatibilidad (al menos yo no he encontrado la manera) con otros **RDBMS** que no sea **SQL Server**, aunque se prev\u00e9 compatibilidad con **SQLite, PostgreSQL, MySQL** entre otros.\r\n\r\nAs\u00ed que sera un simple ejemplo en cuando a c\u00f3digo, es mas la preparaci\u00f3n del entorno, que eso sera igual o parecido cuando salga la versi\u00f3n final.\r\n\r\n### Prerrequisitos\r\n\r\n* Tener **Mono** instalado\r\n* Tener [Visual Studio Code](https://code.visualstudio.com/) (**opcional**)\r\n* Tener **nodejs** (**opcional** pero muy \u00fatil y aconsejable)\r\n\r\n### Instalar Mono\r\n\r\n#### A\u00f1adir los repositorios\r\n\r\n    rpm --import \"http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\"\r\n    yum-config-manager --add-repo http://download.mono-project.com/repo/centos/\r\n\r\n#### Instalar mono y monodevelop\r\n\r\nMonodevelop no lo vamos a usar, pero lo a\u00f1ado por si alguien quiere instalarlo.\r\n\r\n    sudo dnf install mono-complete xsp monodevelop\r\n\r\n<div class=\"alert alert-info\">\r\n    La ultima vez, tuve que instalar <code>dnf install gtk-sharp2-complete</code> si no daba un problema al abrir monodevelop.\r\n</div>\r\n\r\nComo usuario, ejecutamos:\r\n\r\n    mozroots --import --sync\r\n\r\nY por ultimo damos permisos, esto es necesario si vamos a usar **ASP.NET MVC 5**\r\n\r\n    sudo mkdir -p /etc/mono/registry/LocalMachine\r\n    sudo chmod g+rwx /etc/mono/registry\r\n    sudo chmod g+rwx /etc/mono/registry/LocalMachine\r\n\r\nYa tenemos instalado **mono** y **monodevelop**, aunque el segundo no lo vamos a usar.\r\n\r\n#### Instalar DNVM\r\n\r\nSeg\u00fan la pagina del [proyecto](https://github.com/aspnet/dnvm)\r\n\r\n> dnvm is the .NET Version Manager, a set of command line utilities to update and configure which .NET Runtime to use.\r\n\r\nLo instalamos desde la terminal con:\r\n\r\n    curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh && source ~/.dnx/dnvm/dnvm.sh\r\n\r\nA\u00f1adimos a ``.bashrc``\r\n\r\n    vim ~/.bashrc\r\n\r\n    [ -s \"/home/tu_usuario/.dnx/dnvm/dnvm.sh\" ] && . \"/home/tu_usuario/.dnx/dnvm/dnvm.sh\"\r\n\r\n    source ~/.bashrc\r\n\r\nCreamos el archivo de configuracion para **NuGet**\r\n\r\n    mkdir ~/.config/NuGet/\r\n    vim ~/.config/NuGet/NuGet.config\r\n\r\ny a\u00f1adimos\r\n\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <configuration>\r\n      <packageSources>\r\n        <add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v2/\" />\r\n        <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\r\n      </packageSources>\r\n      <disabledPackageSources />\r\n    </configuration>\r\n\r\nAhora, actualizamos ``dnvm``\r\n\r\n    dnvm upgrade\r\n\r\n#### Nodejs\r\n\r\n    sudo dnf install nodejs npm\r\n\r\nE instalamos librer\u00edas necesarias (\u00fatiles) para la creaci\u00f3n de proyectos **ASP.NET**\r\n\r\n    sudo npm install -g yo grunt-cli generator-aspnet bower\r\n\r\n#### Instalar Visual Studio Code\r\n\r\n[Descargamos](https://code.visualstudio.com/Download) el **.zip** de **Visual Studio Code** y lo descomprimimos.\r\n\r\nPara a\u00f1adirlo al men\u00fa del sistema, abrimos la terminal y como usuario **root**\r\n\r\n    su\r\n    cd Downloads\r\n    mv VSCode-linux-x64 /opt/vscode\r\n    touch /usr/local/bin/vscode\r\n    chmod 755 /usr/local/bin/vscode\r\n    vim /usr/local/bin/vscode\r\n\r\nA\u00f1adimos:\r\n\r\n    #!/bin/sh\r\n    export VSCODE_HOME=\"/opt/vscode\"\r\n    $VSCODE_HOME/Code $*\r\n\r\n    vim /usr/share/applications/vscode.desktop\r\n\r\nA\u00f1adimos:\r\n\r\n    [Desktop Entry]\r\n    Encoding=UTF-8\r\n    Name=Visual Studio Code\r\n    Comment=Editor for C# and ASP.NET\r\n    Exec=vscode %U\r\n    Icon=/opt/vscode/resources/app/vso.png\r\n    Terminal=false\r\n    Type=Application\r\n    Categories=GNOME;Application;Development;\r\n    StartupNotify=true\r\n\r\n#### Creaci\u00f3n de un proyecto\r\n\r\nDesde la terminal, vamos a un directorio donde contendr\u00e1 los archivos del proyecto (como usuario, si aun estas como **root** ``exit``:\r\n\r\n    cd ~/projects\r\n    yo aspnet\r\n\r\nNo mostrara un asistente, elegimos **Web Application** y le damos un nombre, para el ejemplo, dejaremos el que no da por defecto **WebApplication**.\r\n\r\nEsto, nos genera una estructura b\u00e1sica para nuestro proyecto gracias **yeoman** y al generador **generator-aspnet**.\r\n\r\nNos movemos al directorio reci\u00e9n creado y ejecutamos ``dnu restore``\r\n\r\n    cd WebApplication\r\n    dnu restore\r\n\r\nEsto nos descargara las dependencias necesarias que las lee de ``.project.json``, tanto para el **backend** (**C# ASP.NET**) como para el **frontend** (**bower**)\r\n\r\nUna vez termina, ejecutamos el servidor\r\n\r\n    dnx . kestrel\r\n\r\ny vamos a ver en el navegador [http://127.0.0.1:5001/](http://127.0.0.1:5001/)\r\n\r\nSi intentas ir a **Register** o **Log in**, dar\u00e1 un error por el conector de la base de datos :(, ha d\u00eda de hoy no he conseguido cambiar el conector a **PostgreSQL** por ejemplo, pero que tarde o temprano se podr\u00e1 (mas pronto que tarde)\r\n\r\nTodo esto pinta genial, le deseo muy buen futuro a estas tecnolog\u00edas (que seguro que lo tendr\u00e1), yo al menos, seguir\u00e9 ech\u00e1ndole un ojo y aprender sobre el tema.",
    "active": true,
    "views": 717,
    "create_at": "2015-06-18T14:46:18Z",
    "update_at": "2017-01-19T02:00:49.463Z",
    "tags": [
      1,
      13
    ]
  }
},
{
  "model": "blog.article",
  "pk": 25,
  "fields": {
    "title": "Inicio basico de Gulp",
    "slug": "inicio-basico-de-gulp",
    "owner": 1,
    "default_tag": 14,
    "image_header": "",
    "body": "[Gulp](http://gulpjs.com/) es un automatizador de tareas que nos ayuda a realizar tareas repetitivas sin apenas esfuerzo.\r\n\r\nEn este peque\u00f1o ejemplo, vamos a imaginar que tenemos varios archivos ``.styl`` y ``.js`` y lo que queremos es que todos los archivos se unan en un solo archivo (1 por cada extensi\u00f3n en este caso) y los comprima.\r\n\r\nLa practica es extremadamente simple y no asumo que tengas conocimientos sobre **Node**.\r\n\r\n**Gulp** usa **pipes** como lo hace los comandos en linux ``|`` que aplica el \"comando\" de la derecha el resultado de la izquierda del los **pipes**.\r\n\r\nPor ejemplo, si queremos saber los archivos que contengan una palabra en el nombre del archivo, har\u00edamos los siguiente.\r\n\r\n    ls | grep nombre_que_coincida\r\n\r\nLo que hace ``grep`` es buscar una coincidencia del resultado de ``ls`` y devolver\u00e1 solo los archivos que contenga el ``nombre_que_coincida``.\r\n\r\nSabiendo un poco por encima que son los [pipes](http://www.reloco.com.ar/linux/prog/pipes.html), vamos a comenzar con el ejemplo.\r\n\r\nEs necesario tener instalado **Node.js** y **NPM**, puedes bajarlo de la pagina de [https://nodejs.org/download/](https://nodejs.org/download/).\r\n\r\nUna vez instalado **Node**, instalamos **Gulp** a nivel global\r\n\r\n    sudo npm install -g gulp\r\n\r\nEn Windows, omite el ``sudo`` (no recuerdo si requiere abrir el s\u00edmbolo del sistema como administrador).\r\n\r\nProbamos si lo tenemos instalado con el siguiente comando\r\n\r\n    gulp -v\r\n\r\n### Iniciar un proyecto\r\n\r\nVamos primero a crear los directorios para la practica, nos situamos en la terminal donde queramos crear la practica y creamos la estructura.\r\n\r\n    mkdir -p gulp-practica/source/{js,css}\r\n    touch gulp-practica/index.html\r\n\r\nQuedando una estructura parecida a esta\r\n\r\n    gulp-practica/\r\n    \u251c\u2500\u2500 index.html\r\n    \u2514\u2500\u2500 source\r\n        \u251c\u2500\u2500 css\r\n        \u2514\u2500\u2500 js\r\n\r\n\r\nNos movemos a la ra\u00edz de la practica\r\n\r\n    cd gulp-practica\r\n\r\nPara hacer la practica lo mas clara posible, vamos a a\u00f1adir el **html**, **css** y **js** lo mas justo posible.\r\n\r\nEl ``index.html``\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>Gulp practica</title>\r\n        <link rel=\"stylesheet\" href=\"dist/css/all.min.css\">\r\n      </head>\r\n      <body>\r\n        <h1 class=\"rojo\">Color rojo</h1>\r\n        <h1 class=\"verde\">Color verde</h1>\r\n        <h1 class=\"azul\">Color azul</h1>\r\n\r\n        <div id=\"js1\"></div>\r\n        <div id=\"js2\"></div>\r\n\r\n        <script src=\"dist/js/all.min.js\"></script>\r\n      </body>\r\n    </html>\r\n\r\nEl css:\r\n\r\n    touch source/css/{rojo,verde,azul}.styl\r\n\r\n**rojo.styl**\r\n\r\n    h1.rojo\r\n        color red\r\n\r\n**verde.styl**\r\n\r\n    h1.verde\r\n        color green\r\n\r\n**verde.styl**\r\n\r\n    h1.azul\r\n        color blue\r\n\r\nEl javascript\r\n\r\n  touch source/js/{js1,js2}.js\r\n\r\n**js1.js**\r\n\r\n    document.getElementById('js1').innerHTML = 'Javascript 1';\r\n\r\n**js1.js**\r\n\r\n    document.getElementById('js2').innerHTML = 'Javascript 2';\r\n\r\nAhora, si abrimos la pagina ``index.html`` se vera que salen 3 \"Color XXX\" en negro.\r\n\r\nEl objetivo es simple, por un lado unificar el **css** y comprimirlo, por otro lado, hacer lo mismo con los archivos ``js``.\r\n\r\nPero primero crearemos el proyecto con **node.js**.\r\n\r\nHay 2 maneras de crear un proyecto con ``npm init`` que nos har\u00e1 una serie de preguntas o simplemente creando 2 archivos ``package.json`` y ``gulpfile.js``.\r\n\r\nLa primera opci\u00f3n parece mas valida para crear un plugin de **node** y la segunda, mas para una practica o proyecto personal (opini\u00f3n personal).\r\n\r\n    touch package.json gulpfile.js\r\n\r\nEditamos el archivo ``package.json`` y a\u00f1adimos:\r\n\r\n    {\r\n      \"name\": \"gulp-practica\",\r\n      \"version\": \"1.0.0\",\r\n      \"main\": \"gulpfile.js\"\r\n    }\r\n\r\nAhora, vamos a instalar los [plugins](http://gulpjs.com/plugins/) a nivel local.\r\n\r\nPara la practica usaremos \r\n\r\n* ``gulp`` \r\n* ``gulp-concat`` para concatenar los archivos\r\n* ``gulp-uglify`` para comprimir el javascript\r\n* ``gulp-stylus`` para pre-procesar y comprimir los archivos **stylus**\r\n\r\nPara instalarlos usaremos ``npm install --save-dev nombre_paquete``, para que lo inserte el nuestro archivo ``package.json``.\r\n\r\n    npm install --save-dev gulp gulp-concat gulp-uglify gulp-stylus\r\n\r\nSi miramos ahora el archivo ``package.json`` vemos que al a\u00f1adir la bandera ``--save-dev`` nos ha a\u00f1adido los paquetes que hemos instalado:\r\n\r\n    {\r\n      \"name\": \"gulp-practica\",\r\n      \"version\": \"1.0.0\",\r\n      \"main\": \"gulpfile.js\",\r\n      \"devDependencies\": {\r\n        \"gulp\": \"^3.9.0\",\r\n        \"gulp-concat\": \"^2.6.0\",\r\n        \"gulp-stylus\": \"^2.0.5\",\r\n        \"gulp-uglify\": \"^1.2.0\"\r\n      }\r\n    }\r\n\r\nSera \u00fatil para futuras instalaciones con ``npm install`` si estamos usando un control de versiones, por ejemplo.\r\n\r\nAhora ya solo nos quedan crear las tareas en ``gulpfile.js``, **Gulp**, es muy f\u00e1cil de usar, tan solo vamos a usar para esta practica 4 m\u00e9todos.\r\n\r\n* gulp.task('nombre', callable) Esto nos creara una tarea.\r\n* gulp.src('path/glob') Ruta/s con la que trabajar.\r\n* gulp.dest('path') Ruta donde creara el archivo.\r\n* pipe() Crearemos los **pipes** con los plugins descargados.\r\n\r\nPara empezar vamos a crear una variable con los plugins descargados, en ``gulpfile.js`` a\u00f1adimos:\r\n\r\n    var gulp = require('gulp'),\r\n        concat = require('gulp-concat'),\r\n        uglify = require('gulp-uglify'),\r\n        stylus = require('gulp-stylus');\r\n\r\nEmpezaremos creando la tarea del **css**\r\n\r\n    gulp.task('style', function() {\r\n        return gulp.src('source/css/*.styl');\r\n    });\r\n\r\nCon eso no hacemos nada (de momento), pero creamos un tarea con ``gulp.task()``, con el primer par\u00e1metro, le damos un nombre y como segundo par\u00e1metro, le pasamos un **string** con la ruta a la que trabajar. Puedes pasar patrones **glob** en un **string** o en un **array** ``['source/css/**/*.styl', 'otra/ruta/*.styl']``.\r\n\r\nDe momento, lo que tiene es la ruta en la que trabajar, ahora con los **pipes**\r\n\r\n    gulp.task('style', function() {\r\n        return gulp.src('source/css/*.styl')\r\n            .pipe(concat('all.min.styl'))\r\n    });\r\n\r\nCon ``.pipe(concat('all.min.styl'))``, decimos que concatene todos los archivos y le damos el nombre del archivo a concatenar, ha de ser otra vez ``.styl`` por que, como veremos ahora, tenemos que pasar a ``.css`` y comprimir.\r\n\r\nAhora es como si nuestros 3 archivos ``.styl`` se hubieran concatenado en uno solo llamado ``all.min.styl``.\r\n\r\nAhora lo vamos a pasar a ``.css`` y comprimir\r\n\r\n    gulp.task('style', function() {\r\n        return gulp.src('source/css/*.styl')\r\n            .pipe(concat('all.min.styl'))\r\n            .pipe(stylus({'compress': true}))\r\n    });\r\n\r\nParece ser que ``.pipe(stylus({'compress': true}))``, tambi\u00e9n cambia la extensi\u00f3n de ``.styl`` a ``.css`` (llevo apenas unas horas indagando con el tema de Gulp :))\r\n\r\nY ya por ultimo, lo guardamos con ``gulp.dest()``\r\n\r\n    gulp.task('style', function() {\r\n        return gulp.src('source/css/*.styl')\r\n            .pipe(stylus({'compress': true}))\r\n            .pipe(concat('all.min.css'))\r\n            .pipe(gulp.dest('dist/css'))\r\n    });\r\n\r\nObserva que solo le pasamos la ruta, el nombre del archivo ya se lo dimos con ``.pipe(concat('all.min.styl'))``\r\n\r\nPara probarlo, usamos el siguiente comando en la terminal\r\n\r\n    gulp style\r\n\r\nDonde ``style`` es el nombre que le dimos a la tarea, pero podr\u00edamos crear una simple tarea por defecto para que con simplemente ``gulp`` la ejecute por defecto.\r\n\r\nA\u00f1adimos al final del archivo:\r\n\r\n    gulp.task('default', ['style']);\r\n\r\nLo mismo ``default`` es el nombre de la tarea y luego un array con las tareas a ejecutar, en este caso, como solo tenemos 1... y en la terminal simplemente usamos:\r\n\r\n    gulp\r\n\r\nPodemos ver que en ``dist/css/`` hay un archivo ``all.min.css`` y si actualizamos la pagina ``index.html`` vemos que ahora salen los 3 colores.\r\n\r\nPues con el ``js``, b\u00e1sicamente lo mismo, aqu\u00ed pego el c\u00f3digo que ya se debe entender bien\r\n\r\n    // Load npm modules\r\n    var gulp = require('gulp'),\r\n        concat = require('gulp-concat'),\r\n        uglify = require('gulp-uglify'),\r\n        stylus = require('gulp-stylus');\r\n\r\n    // Style\r\n    gulp.task('style', function() {\r\n        return gulp.src('source/css/*.styl')\r\n            .pipe(concat('all.min.styl'))\r\n            .pipe(stylus({'compress': true}))\r\n            .pipe(gulp.dest('dist/css'))\r\n    });\r\n\r\n    // JS\r\n    gulp.task('scripts', function() {\r\n        return gulp.src('source/js/*.js')\r\n            .pipe(concat('all.min.js'))\r\n            .pipe(uglify())\r\n            .pipe(gulp.dest('dist/js'));\r\n    });\r\n\r\n    // Default Task\r\n    gulp.task('default', ['style', 'scripts']);\r\n\r\nEjecutamos\r\n\r\n    gulp\r\n\r\ny vemos los cambios en el navegador :)\r\n\r\nVamos ahora a usar el m\u00e9todo ``gulp.watch('ruta', 'task')``, donde ruta, es la **ruta** en la que trabajar cuando sucede \"algo\" y **task** es el nombre de una tarea.\r\n\r\nEsto es muy \u00fatil para cuando estamos editando archivos, cada modificaci\u00f3n, **Gulp** se dar\u00e1 cuenta y ejecutara la tarea.\r\n\r\nA\u00f1adimos una nueva tarea y la a\u00f1adimos a la tarea ``default``\r\n\r\n    // ...\r\n\r\n    // Watch\r\n    gulp.task('watch', function() {\r\n        gulp.watch('source/css/*.styl', ['style']);\r\n        gulp.watch('source/js/*.js', ['scripts']);\r\n    });\r\n\r\n    // Default Task\r\n    gulp.task('default', ['style', 'scripts', 'watch']);\r\n\r\nAhora si ejecutamos ``gulp`` en la terminal, podemos ver, que se queda en escucha y cuando se haga un cambio, ejecutara la tarea que corresponda.\r\n\r\nSe pueden hacer muchas cosas mas, sobre todo con los plugins, pero espero que con esto te haya quedado mas o menos claro como funciona **Gulp** y sus tareas :).",
    "active": true,
    "views": 341,
    "create_at": "2015-07-20T01:27:32Z",
    "update_at": "2017-01-19T02:00:49.444Z",
    "tags": [
      14,
      15,
      16
    ]
  }
},
{
  "model": "blog.article",
  "pk": 26,
  "fields": {
    "title": "A\u00f1adir diccionario esp a Pycharm",
    "slug": "anadir-diccionario-esp-pycharm",
    "owner": 1,
    "default_tag": 7,
    "image_header": "",
    "body": "Hoy he estado probando Pycharm y lo primero que he echado en falta es un corrector de ortogr\u00e1fico del idioma espa\u00f1ol.\r\n\r\nBuscando un poco, he encontrado en GitHub el repo de [EOM](https://github.com/EOM/Spell-Checking-PHPStorm-Spanish-dic-UTF8) y me ha solucionado el problema :).\r\n\r\nPoner ``spanish-utf8.dic`` en cualquier directorio y desde PyCharm ``settings > Editor > Spelling`` y en la pesta\u00f1a de Dictionaries, a\u00f1adir el directorio donde se haya puesto el archivo ``spanish-utf8.dic``.",
    "active": true,
    "views": 599,
    "create_at": "2015-10-18T09:35:47Z",
    "update_at": "2017-01-19T02:00:49.424Z",
    "tags": [
      7
    ]
  }
},
{
  "model": "blog.article",
  "pk": 27,
  "fields": {
    "title": "Signals en Django",
    "slug": "signals-en-django",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "**signals** (se\u00f1ales) en Django, es \u00fatil para hacer una acci\u00f3n antes o despu\u00e9s de crear, actualizar, etc un modelo.\r\n\r\n### Algunos tipos de **signals**\r\n\r\n* **django.db.models.signals.pre_init**: Cada vez que se instancia un modelo, esta se\u00f1al se envi\u00e1 al llamar al m\u00e9todo ``__init__()``.\r\n* **django.db.models.signals.post_init:** Como ``pre_init``, pero \u00e9ste se env\u00eda cuando el m\u00e9todo ``__init __()`` termina.\r\n* **django.db.models.signals.pre_save:** Este es llamado al principio, al llamar el m\u00e9todo ``save()`` del modelo.\r\n* **django.db.models.signals.post_save:** Como ``pre_save``, pero este se envi\u00e1 cuando el m\u00e9todo ``save()`` termina.\r\n\r\nPara una lista completa, ir a la [documentaci\u00f3n](https://docs.djangoproject.com/en/1.8/ref/signals/) de Django, con los par\u00e1metros que se envi\u00e1.\r\n\r\nPara un peque\u00f1o ejemplo, vamos a crear un modelo ``UserProfile`` con la informaci\u00f3n del usuario. Vamos a a\u00f1adir los campos ``pais`` y ``provincia`` y un campo ``user`` que tendr\u00e1 una relaci\u00f3n ``OneToOneField`` con ``settings.AUTH_USER_MODEL``.\r\n\r\nEn este caso, se supone que se usara despu\u00e9s de que el usuario haya sido creado, pero no la mostrara en el formulario de registro, por eso, los campos ``pais`` y ``provincia`` ser\u00e1n ``default='', blank=True`` (``blank=True``, ya va a gustos si cuando muestre el formulario, es requerido o no).\r\n\r\n    # accounts/models.py\r\n    from django.db import models\r\n    from django.conf import settings\r\n\r\n\r\n    class UserProfile(models.Model):\r\n        user = models.OneToOneField(\r\n            settings.AUTH_USER_MODEL, primary_key=True, related_name='user_profile'\r\n        )\r\n        pais = models.CharField(max_length=100, default='', blank=True)\r\n        provincia = models.CharField(max_length=100, default='', blank=True)\r\n        # Otros campos...\r\n\r\nAhora, podemos hacelo de dos maneras, una a\u00f1adiendo el **signal** en el mismo modulo del modelo, o bien creando un modulo separado ``signals.py``.\r\n\r\nPara crearlo en el mismo modulo ``models.py``, creamos el **signal** abajo del archivo.\r\n\r\n    # accounts/models.py\r\n    # Importar los modulos necesarios al principio.\r\n    from django.db.models.signals import post_save\r\n    from django.dispatch import receiver\r\n    from django.conf import settings\r\n\r\n\r\n    @receiver(post_save, sender=settings.AUTH_USER_MODEL)\r\n    def create_profile_handler(sender, instance, created, **kwargs):\r\n        if not created:\r\n            return\r\n        UserProfile.objects.create(user=instance)\r\n\r\nCada vez que se cree, un usuario, se creara un campo en el modelo UserProfile. Esta es la manera r\u00e1pido, pero si hay muchos **signals** lo ideal es ponerlos todos juntos en el modulo ``signals``.\r\n\r\n    # accounts/signals.py\r\n    from django.db.models.signals import post_save\r\n    from django.dispatch import receiver\r\n    from django.conf import settings\r\n\r\n    from .model import UserProfile\r\n\r\n    @receiver(post_save, sender=settings.AUTH_USER_MODEL)\r\n    def create_profile_handler(sender, instance, created, **kwargs):\r\n        if not created:\r\n            return\r\n        UserProfile.objects.create(user=instance)\r\n\r\nDe momento, no hemos hecho nada nuevo..., creamos un modulo ``apps.py`` y a\u00f1adimos.\r\n\r\n    # accounts/apps.py\r\n    from django.apps import AppConfig\r\n\r\n\r\n    class AccountsConfig(AppConfig):\r\n        name = 'accounts'\r\n        verbose_name = 'Accounts Application'\r\n\r\n        def ready(self):\r\n            from . import signals\r\n\r\nDonde ``name = 'accounts'`` es la ruta a la app, si estuviera en ``apps/accounts``, se tendria que cambiar por ``name = 'apps.accounts'``, ``verbose_name`` es un nombre legible que le damos.\r\n\r\nAhora, cada vez que cargue el paquete ``accounts``, tenemos que decirle que lea ``AccountsConfig``, para ello editamos el ``__init__.py`` del modulo ``accounts``.\r\n\r\n    # accounts/__init__.py\r\n    default_app_config = 'accounts.apps.AccountsConfig'\r\n\r\nCon esto, cada vez que se cree un nuevo usuario en la base de datos, se creara una fila en la table ``accounts_userprofile`` con un campo relacional a ``auth_user`` (por defecto).\r\n\r\n-----\r\n\r\n**Referencias:**\r\n\r\n* [Documentaci\u00f3n Django](https://docs.djangoproject.com/en/1.8/ref/signals/)\r\n* [www.koopman.me](http://www.koopman.me/2015/01/django-signals-example/)",
    "active": true,
    "views": 534,
    "create_at": "2015-10-19T10:36:17Z",
    "update_at": "2017-01-19T02:00:49.402Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 28,
  "fields": {
    "title": "Django - Marcar active la pagina actual en navbar",
    "slug": "django-marcar-active-la-pagina-actual-en-navbar",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Una soluci\u00f3n r\u00e1pida para marcar en el panel de navegaci\u00f3n como **active** si corresponde a la pagina actual que se esta viendo, es con un **simple_tag**.\r\n\r\nComo el **simple_tag** no pertenece a ninguna **app**, la crea en al **app** ``core``, que es la que utilizo para cosas comunes que no tienen que ver con una **app** en concreto.\r\n\r\nDentro de ``core`` creo un directorio ``templatetags`` con su archivo ``__init__.py`` para que Python lo trate como un paquete. \r\n\r\nTambi\u00e9n creo el archivo ``core_tags.py``, donde se creara el ``simple_tag`` con el siguiente c\u00f3digo:\r\n\r\n    from django.template import Library\r\n    from django.core.urlresolvers import reverse\r\n\r\n    register = Library()\r\n\r\n\r\n    @register.simple_tag\r\n    def active_link(request, urlconf_name):\r\n        \"\"\"Devolvera active si request.path coincide con\r\n        reverse(urlconf_name), en caso contrario devolvera ''.\r\n        \"\"\"\r\n        url_reverse = reverse(urlconf_name)\r\n        if request.path == url_reverse:\r\n            return 'active'\r\n        return ''\r\n\r\nLo que har\u00e1 sera comprobar la actual **URL** con el nombre de ``URLConf``, en caso de coincidencia, devolver\u00e1 el **string** ``active``, en caso contrario, devolver\u00e1 ``''``.\r\n\r\nPara usarlo desde un **template**, por ejemplo ``_navbar.html``\r\n\r\n    {% load core_tags %}\r\n\r\n    <div class=\"navbar-collapse collapse\">\r\n      <ul class=\"nav navbar-nav\">\r\n        <li class=\"{% active_link request 'home_page' %}\">\r\n          <a href=\"{% url 'home_page' %}\">Home</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\nSe carga primero las tags con ``{% load core_tags %}``, despu\u00e9s en el link que se quiere comprobar se a\u00f1ade ``<li class=\"{% active_link request 'home_page' %}\">``, donde ``active_link`` es el nombre de la **tag**, ``request`` que tiene que estar en ``context_processors`` ``django.template.context_processors.request`` para que funcione (por defecto en Django 1.8 esta activado) y ``'home_page'``, que es el **name** del ``URLConf``.\r\n\r\nEspero que sea \u00fatil el tip :-)",
    "active": true,
    "views": 466,
    "create_at": "2015-10-21T11:54:27Z",
    "update_at": "2017-01-19T02:00:49.380Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 29,
  "fields": {
    "title": "Django pasar datos de la view al form",
    "slug": "django-pasar-datos-de-la-view-al-form",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Peque\u00f1o **tip** para obtener datos en un formulario desde una vista. Para ello, hay que pasar un **keyword argument** al formulario desde la vista.\r\n\r\nSe puede hacer tanto desde **FBV** como con **CBV**\r\n\r\n### Desde un **FBV**\r\n\r\n    # app/views.py\r\n\r\n    def my_form(request):\r\n        # Obteniendo un formulario limpio\r\n        form = forms.MyForm(user=request.user)\r\n\r\n        # Obteniendo un formulario con datos POST/GET\r\n        form = forms.MyForm(request.POST, user=request.user)\r\n        # ....\r\n\r\n### Desde un **CBV**\r\n\r\n    # app/views.py\r\n\r\n    class MyFormView(FormView):\r\n        form_class = forms.MyForm\r\n\r\n        def get_form_kwargs(self):\r\n            kwargs = super().get_form_kwargs()\r\n            kwargs['user'] = self.request.user\r\n            return kwargs\r\n\r\n        # ...\r\n\r\n### El formulario\r\n\r\n    # app/forms.py\r\n\r\n    class MyForm(forms.Form):\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            self.user = kwargs.pop('user', None)\r\n            super().__init__(*args, **kwargs)\r\n\r\n            if self.user.is_superuser():\r\n                # hacer algo si es super usuario.\r\n\r\nEs importante, primero obtener el dato ``self.user`` antes de llamar a ``super()``. Ahora ya se puedes tomar decisiones en el formulario seg\u00fan los datos obtenidos.\r\n\r\nOtra manera, seria con [django-craces](http://django-braces.readthedocs.org/en/latest/form.html#userformkwargsmixin).",
    "active": true,
    "views": 542,
    "create_at": "2015-10-22T10:57:08Z",
    "update_at": "2017-01-19T02:00:49.354Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 30,
  "fields": {
    "title": "Actualizar Fedora 23 desde Fedora 22 con dnf",
    "slug": "actualizar-fedora-23-desde-fedora-22-con-dnf",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "Dentro de 5 dias saldra Fedora 23 y para todos los que quieran actualizar de F22 a F23 con dnf, les dejo aqu\u00ed los pasos que encontr\u00e9 en [tecadmin.net](http://tecadmin.net/upgrade-to-fedora-23-beta-from-fedora-22-using-dnf/).\r\n\r\nDejo los pasos aqu\u00ed de manera r\u00e1pida, todo como s\u00faper usuario.\r\n\r\n**Importar GPG key de Fedora 23**\r\n\r\n    rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-23-$(uname -i)\r\n\r\n**Actualizar a Fedora 23**\r\n\r\n    dnf upgrade\r\n    dnf clean all\r\n    dnf --releasever=23 --setopt=deltarpm=false distro-sync --nogpgcheck\r\n\r\nEsto tarda su tiempo, dependiendo de la conexi\u00f3n y la maquina en la que se actualiza.\r\n\r\nCuando termine, reiniciar la maquina y listo. Yo solo me he encontrado un peque\u00f1o \"problema\", en Fedora 23, ha cambiado la ubicaci\u00f3n donde se almacena la pol\u00edtica de SELinux, por lo que me ha tocado volver a poner todas las que tenia puestas.\r\n\r\nPor lo dem\u00e1s todo perfecto :D",
    "active": true,
    "views": 677,
    "create_at": "2015-10-22T11:36:48Z",
    "update_at": "2017-01-19T02:00:49.332Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 31,
  "fields": {
    "title": "Generar gr\u00e1ficos del modelo con django-extensions",
    "slug": "generar-graficos-del-modelo-con-django-extensions",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Para crear una representaci\u00f3n gr\u00e1fica de lo modelos, hay que tener instalado [django-extensions](https://github.com/django-extensions/django-extensions).\r\n\r\n**Prerequisitos**\r\n\r\nSe ha de instalar el paquete ``graphviz``, en Fedora:\r\n\r\n    sudo dnf install graphviz graphviz-devel\r\n\r\nEn Ubuntu \u00bf`sudo apt-get install graphviz graphviz-dev`? (no lo he probado)\r\n\r\nAhora en el entorno virtual (por ejemplo), instalar ``django-extensions`` y ``pygraphviz``.\r\n\r\n    (my_venv) pip install django-extensions pygraphviz\r\n\r\nA\u00f1adimos ``django-extensions`` en ``INSTALLED_APPS``.\r\n\r\n    # my_project/settings.py\r\n\r\n    INSTALLED_APPS = (\r\n        # ...\r\n\r\n        'django-extensions',\r\n    )\r\n\r\nAhora, para generar las im\u00e1genes, de todos los modelos, incluidos los propios de Django:\r\n\r\n    ./manage.py graph_models -a -o myapp_models.png\r\n\r\nY para generar de modelos espec\u00edficos:\r\n\r\n    ./manage.py graph_models myapp1 myapp2 > models.dot\r\n    dot -Tpng models.dot -o models.png\r\n\r\n<img src=\"/static/dist/img/articles/model_graph.png\" class=\"responsive-img\" alt=\"Models Graph\">\r\n\r\n----\r\n\r\n**Fuentes**\r\n\r\n* [django-extensions](http://django-extensions.readthedocs.org/en/latest/graph_models.html)",
    "active": true,
    "views": 729,
    "create_at": "2015-10-24T08:32:56Z",
    "update_at": "2017-01-19T02:00:49.306Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 32,
  "fields": {
    "title": "Configuraci\u00f3n ssh en Centos 7",
    "slug": "configuracion-ssh-en-centos-7",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "En esta practica, vamos a configurar el cliente y servidor de **ssh**, para la practica uso el cliente que es Fedora 23 y el servidor Centos 7.\r\n\r\nEl servidor a parte del usuario **root**, tiene un usuario creado **snicoper**, es importante tener un usuario a parte de **root**.\r\n\r\n**IPS**\r\n\r\n* Servidor: **10.0.0.2**\r\n* Cliente: **10.0.0.3**\r\n\r\n### El servidor\r\n\r\nConectar al servidor con **shh**, desde el cliente.\r\n\r\n    ssh snicoper@10.0.0.2\r\n\r\n<div class=\"alert alert-info\">Si el servidor solo tiene un usuario <strong>root</strong>, se ha de entrar con <strong>root</strong>, una vez entres con <strong>root</strong> lo primero es crear un usuario normal.</div>\r\n\r\n    adduser snicoper\r\n    passwd # poner 2 veces el mismo password.\r\n\r\nSi has entrado con **root** para poder crear el usuario, ahora sal con ``exit`` y vuelve a entrar con el usuario reci\u00e9n creado.\r\n\r\nLo siguiente, asume que estas conectado con un usuario normal.\r\n\r\nEl servidor tiene una instalaci\u00f3n m\u00ednima, as\u00ed que lo primero es actualizarlo.\r\n\r\n    su -\r\n    yum update -y\r\n\r\nInstalar editor vim/nano/etc, en mi caso **vim**.\r\n\r\n    yum install -y vim\r\n\r\nPor defecto **ssh** viene ya instalado, para asegurarnos:\r\n    \r\n    yum list installed openssh-server\r\n\r\n    Loaded plugins: fastestmirror\r\n    Loading mirror speeds from cached hostfile\r\n     * base: mirror.trueinter.net\r\n     * extras: mirror.trueinter.net\r\n     * updates: mirror.trueinter.net\r\n    Installed Packages\r\n    openssh-server.x86_64                 6.6.1p1-12.el7_1                  @updates\r\n\r\nHan de mostrar la ultima linea, si no la muestra, instalamos ``openssh-server``.\r\n\r\n    yum install -y openssh-server\r\n\r\nA la vez, tambi\u00e9n por defecto (al menos en **centos minimal**), el servicio ``sshd`` esta activado y arrancado.\r\n\r\n    systemctl status sshd\r\n    \r\n    sshd.service - OpenSSH server daemon\r\n    Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled)\r\n    Active: active (running) since s\u00e1b 2015-10-31 21:40:22 CET; 5min ago\r\n    Main PID: 889 (sshd)\r\n    CGroup: /system.slice/sshd.service\r\n            \u2514\u2500889 /usr/sbin/sshd -D\r\n\r\nSi no esta arrancado y/o activado:\r\n\r\n    systemctl start sshd.service\r\n    systemctl enable sshd.service\r\n\r\nVamos a configurar el servidor para a\u00f1adirle un poco de seguridad.\r\n\r\nEditar el archivo de configuraci\u00f3n de **ssh**\r\n\r\n    vim /etc/ssh/sshd_config\r\n\r\nDe momento tocaremos las siguientes lineas.\r\n\r\n**Linea 17**, descomentar y cambiar el puerto, (el puerto a tu gusto...)\r\n\r\n    #Port 22\r\n    Port 22222\r\n\r\n**Linea 49**: Descomentar y cambiar a ``no``, no permitir el acceso a **root**.\r\n\r\n    #PermitRootLogin yes\r\n    PermitRootLogin no\r\n\r\n**Al final del archivo**: A\u00f1adir a los usuarios que se les permitir\u00e1 acceder.\r\n\r\n    AllowUsers snicoper\r\n\r\nGuardar y salir.\r\n\r\nCuando configuremos (creemos la clave **ssh**), volveremos a este archivo, de momento, reiniciamos el servidor.\r\n\r\n    systemctl restart sshd.service\r\n\r\n### Firewalld\r\n\r\nSi en el archivo de configuraci\u00f3n se ha cambiado el puerto a uno distinto de ``22``, debemos abrir el puerto.\r\n\r\n    firewall-cmd --permanent --zone=public --add-port=22222/tcp\r\n    firewall-cmd --reload\r\n\r\n## SELinux\r\n\r\nOtra cosa a hacer, solo si se ha cambiado el puerto a uno distinto a ``22``, es a\u00f1adir la regla a **SELinux**.\r\n\r\n    semanage port -a -t ssh_port_t -p tcp 22222\r\n\r\n<div class=\"alert alert-info\">Si el comando anterior lanza <code>bash: semanage: command not found</code></div>\r\n\r\nInstalar:\r\n\r\n    yum install policycoreutils-python\r\n\r\nReiniciar ``sshd.service``\r\n\r\n    systemctl restart sshd.service\r\n\r\n### El cliente\r\n\r\nLo primero que se ha de hacer en el cliente, es generar una clave ``ssh``, como usuario normal abrir una terminal y escribir.\r\n\r\n    $ ssh-keygen -t rsa\r\n    Generating public/private rsa key pair.\r\n    Enter file in which to save the key (/home/snicoper/.ssh/id_rsa):\r\n\r\nDejar la ruta por defecto y luego os pedir\u00e1 un **passphrase**, que tendr\u00e1s que ponerlo 2 veces.\r\n\r\nEsto nos habr\u00e1 generado un directorio ``~/.ssh`` con dos archivos:\r\n\r\n    .ssh/\r\n    \u251c\u2500\u2500 id_rsa\r\n    \u2514\u2500\u2500 id_rsa.pub\r\n\r\nAhora vamos a subir al servidor la clave ``id_rsa.pub``, y para ello, hay dos maneras r\u00e1pidas (entre otras).\r\n\r\nLa primera es simplemente\r\n\r\n    $ ssh-copy-id -p 22222 snicoper@10.0.0.2\r\n    \r\n    /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\r\n    /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\r\n    snicoper@192.168.124.13's password: \r\n\r\n    Number of key(s) added: 1\r\n\r\n    Now try logging into the machine, with:   \"ssh -p '22222' 'snicoper@10.0.0.2'\"\r\n    and check to make sure that only the key(s) you wanted were added.\r\n\r\nSi se entra al servidor, podemos ver que se ha a\u00f1adido en el archivo ``~/.ssh/authorized_keys``.\r\n\r\n    ssh -p 22222 snicoper@10.0.0.2\r\n    cat ~/.ssh/authorized_keys\r\n\r\nLa otra forma es subirla por **scp**\r\n\r\n    scp -P 22222 ~/.ssh/id_rsa.pub snicoper@10.0.0.2:\r\n\r\nOjo que aqu\u00ed ``-P`` es en may\u00fasculas.\r\n\r\nEsto nos subir\u00e1 la clave a la ra\u00edz del usuario **snicoper**, ahora nos conectamos al servidor, para insertarla al archivo ``authorized_keys``\r\n\r\n    ssh -p 22222 snicoper@10.0.0.2\r\n    \r\n    mkdir ~/.ssh\r\n    chmod 700 ~/.ssh\r\n    cat ~/id_rsa.pub ~/.ssh/authorized_keys\r\n    chmod 600 ~/.ssh/authorized_keys\r\n\r\nAhora si salimos, ``exit`` y estando en el cliente, probamos que podamos acceder, con el ``passphrase`` que pusimos cuando generamos la ``key``.\r\n\r\n    ssh -p 22222 snicoper@10.0.0.2\r\n\r\nAhora, terminamos de configurar el servidor.\r\n\r\nEstando conectados a nuestro servidor, volvemos a editar el archivo de configuraci\u00f3n.\r\n\r\n    su -\r\n    vim /etc/ssh/sshd_config\r\n    \r\nPor defecto estas dos configuraciones vienen as\u00ed (**Lineas: 78 y 79**):\r\n\r\n    #PermitEmptyPasswords no\r\n    PasswordAuthentication yes\r\n\r\nAqu\u00ed, reconozco que tengo un poco de confusi\u00f3n, pero creo que esto es lo que significa cada uno de ellos y las consecuencias.\r\n\r\nSi ``PasswordAuthentication`` esta en ``no``, solo se permitir\u00e1 conectarse las personas que tengan una clave ``id_rsa.pub`` en ``authorized_keys``.\r\n\r\nEs decir, que si perdemos en el cliente la clave publica y privada, si no tenemos acceso a servidor f\u00edsico, abr\u00eda que buscar otra manera para mandar la clave publica o no podr\u00edamos entrar por **ssh**\r\n\r\nEn cambio ``PermitEmptyPasswords``, depende de ``PasswordAuthentication``, por que si esta en ``no``, solo se podr\u00e1 entrar si hay una ``id_rsa.pub`` en ``authorized_keys`` y ademas, cuando creamos la clave con ``ssh-keygen -t rsa`` y nos pidi\u00f3 en **passphrase**, si dejamos en blanco el campo, no se podr\u00e1 acceder, ya que nos obliga a poner un **password**.\r\n\r\nPor lo tanto, yo lo dejo as\u00ed:\r\n\r\n    PermitEmptyPasswords no\r\n    PasswordAuthentication yes\r\n\r\nGuardamos, salimos y reiniciamos el servidor.\r\n\r\n    systemctl restart sshd.service\r\n\r\nAhora, por ultimo, para probar, salimos y volvemos a entrar.\r\n\r\n    ssh -p 22222 snicoper@10.0.0.1\r\n\r\nEstos son los pasos b\u00e1sicos para configurar nuestro servidor **ssh** con un poco mas de seguridad.\r\n\r\nEspero que les haya sido \u00fatil ;-)",
    "active": true,
    "views": 677,
    "create_at": "2015-10-31T22:39:08Z",
    "update_at": "2017-01-19T02:00:49.283Z",
    "tags": [
      1,
      12
    ]
  }
},
{
  "model": "blog.article",
  "pk": 33,
  "fields": {
    "title": "Chromium espa\u00f1ol en Linux",
    "slug": "chromium-espanol-en-linux",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "Uso la configuraci\u00f3n en el archivo ``/etc/locale.conf`` de mis [apuntes](http://apuntes-snicoper.readthedocs.org/es/latest/linux/fedora-centos/post_instalacion_fedora.html#idiomas).\r\n\r\nMe gusta tener la interfaz en ingles por que algo se aprende (eso espero) y por que ya me he\r\nacostumbrado y me resulta extra\u00f1o verla en espa\u00f1ol.\r\n\r\nPor defecto la interfaz me sale en ingles y con **Chromium** cada vez que quiero\r\ntraducir una pagina que esta en ingles, tengo que darle al **boton derecho**, seleccionar\r\n**translate to english**, despu\u00e9s me sale el recuadro en la parte superior, he de darle a **options**\r\ny en **translation language** he de buscar **spanish**.\r\n\r\nTotal un co\u00f1azo cada vez que quiero traducir una pagina entera (podr\u00eda recordarlo :)).\r\n\r\nPor lo visto la interfaz de Chromium la muestra en base a ``LC_MESSAGES`` que en mi caso es\r\n``en_US.UTF-8``.\r\n\r\nHe estado buscando un poco y lo \u00fanico que he encontrado a sido esta\r\n[pagina](https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/l4X2O6kEamw) que es\r\nposible poniendo en la terminal ``LANGUAGE=es chromium-browser``, lanzara la aplicaci\u00f3n en **espa\u00f1ol**.\r\n\r\nNo lo he probado, pero tal vez, si edito ``/usr/bin/chromium-browser``, cuando actualice, me lo\r\nsobre escribir\u00e1.\r\n\r\nAs\u00ed que he creado un archivo:\r\n\r\n```bash\r\nsudo vim /usr/bin/chromes\r\n```\r\n\r\nHe a\u00f1adido\r\n\r\n```bash\r\nLANGUAGE=es chromium-browser\r\n```\r\n\r\nAhora, hay que darle permisos de ejecuci\u00f3n.\r\n\r\n```bash\r\nsudo chmod +x /usr/bin/chromes\r\n```\r\n\r\nEsto supongo que es valido para Chrome/Chromium y cualquier DE en Linux. Lo \u00fanico que puede cambiar\r\nes el nombre del ejecutable (``chrome``, ``chrome-browser``, ``chromium``, etc) en ``/usr/bin``.\r\n\r\nPara ejecutarlo, ``Alt+F2`` y pongo ``chromes``.\r\n\r\nTal vez no sea la mejor soluci\u00f3n, pero para las veces que abro Chromium y necesito traducir algo,\r\nya me vale.\r\n\r\n----\r\n\r\n**Edit: 19-11-2017**\r\n\r\nUna opci\u00f3n mas simple editando `sudo vim /usr/bin/chromium-browser`\r\n\r\nA\u00f1adir en la primera linea vac\u00eda.\r\n\r\n```bash\r\nexport LANGUAGE=es\r\n```\r\n\r\nLo \u00fanico, que cada vez que se actualiza **Chromium** se ha de volver a poner.",
    "active": true,
    "views": 462,
    "create_at": "2015-11-16T06:14:06Z",
    "update_at": "2017-11-19T18:02:24.326Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 35,
  "fields": {
    "title": "Instalar Discord en Fedora",
    "slug": "instalar-discord-en-fedora",
    "owner": 1,
    "default_tag": 1,
    "image_header": "",
    "body": "De momento no hay una versi\u00f3n final, pero si quieres estar hablando con tus colegas, quiz\u00e1 te pueda servir.\r\n\r\nTodo se hace como s\u00faper usuario (su)\r\n\r\n## Requisitos\r\n\r\n    dnf install libXScrnSaver\r\n\r\n## Instalaci\u00f3n\r\n\r\nDescargar de [GitHub](https://github.com/crmarsh/discord-linux-bugs) el ``.tar.gz`` y descomprimir, por ultimo ir al **path** donde este el descomprimido y como s\u00faper usuario:\r\n\r\n    mv DiscordCanary /opt/discord\r\n    chmod +x /opt/discord/DiscordCanary\r\n    ln -s /opt/discord/DiscordCanary /usr/local/bin/discord\r\n\r\nPor ultimo, crear un enlace al men\u00fa.\r\n\r\n    vim /usr/share/applications/discord.desktop\r\n\r\nA\u00f1adimos:\r\n\r\n    [Desktop Entry]\r\n    Encoding=UTF-8\r\n    Name=Discord\r\n    Comment=Chat\r\n    Exec=discord %U\r\n    Icon=/opt/discord/discord.png\r\n    Terminal=false\r\n    Type=Application\r\n    StartupNotify=true",
    "active": true,
    "views": 377,
    "create_at": "2016-06-10T15:54:23Z",
    "update_at": "2017-01-19T02:00:49.246Z",
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 36,
  "fields": {
    "title": "Reformado el blog y compartido en GitHub",
    "slug": "reformado-el-blog-y-compartido-en-github",
    "owner": 1,
    "default_tag": 4,
    "image_header": "",
    "body": "Estos \u00faltimos d\u00edas he estado modificando un poco el blog y preparado para poder compartir el c\u00f3digo en [https://github.com/snicoper/snicoper.com](https://github.com/snicoper/snicoper.com).\r\n\r\nLe faltan algunos retoques y crear documentaci\u00f3n por si alguien lo quiere probar.\r\n\r\nCualquier critica, sera bien venida ^_^",
    "active": true,
    "views": 264,
    "create_at": "2016-07-15T20:02:50.240Z",
    "update_at": "2017-01-19T02:00:49.234Z",
    "tags": [
      2,
      4,
      17
    ]
  }
},
{
  "model": "blog.article",
  "pk": 37,
  "fields": {
    "title": "Crear Registro con validacion de Email - Parte 1",
    "slug": "crear-registro-con-validacion-de-email-parte-1",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "## Temas\r\n\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-1\">Parte 1 Introduccion</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-2\">Parte 2 Modelo</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-3\">Parte 3 Formularios</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-4\">Parte 4 Vistas</a>\r\n\r\n## Introducci\u00f3n\r\n\r\nPeque\u00f1o tutorial para crear registro de usuarios en dos pasos.\r\nEste tutorial lo he dividido en varias entradas para que no se hagan muy largas.\r\n\r\nVamos a crear un registro de usuarios que se podr\u00e1 comprobar que\r\nel email introducido por el usuario es valido con un token.\r\n\r\nExisten ya soluciones echas como [django-allauth](https://github.com/pennersr/django-allauth)\r\no [django-registration](https://github.com/macropin/django-registration), pero para aprender\r\nun poco, vamos a hacer el nuestro, siendo mas simple que los anteriores :).\r\n\r\nEste tutorial esta echo con Django 1.10, Python 3 usando virtualenvwrapper y\r\nFedora 24\r\n\r\n## Pasos\r\n\r\nUn usuario quiere registrarse en el sitio, por lo que se le mostrara el\r\nformulario de registro.\r\n\r\nSi el usuario rellena el formulario de registro, se validara los datos, se\r\ncomprobara que el **username** y **email** no existen ya en la base de datos.\r\n\r\nSi existen, se le volver\u00e1 a mostrar el formulario mostrando los errores.\r\n\r\nSi no existen, se le enviara un email con un **token** \u00fanico de validaci\u00f3n, se\r\nle redireccionara a una pagina informando de que se ha mandado un email donde\r\npodr\u00e1 validar el email y terminar el registro.\r\n\r\nEstos son los pasos a groso modo, en cada secci\u00f3n, se ira explicando en mas\r\ndetalle las posibles opciones.\r\n\r\n## Creaci\u00f3n y preparaci\u00f3n del proyecto\r\n\r\nVamos a crear en primer lugar el proyecto, todo va a ser los mas simple posible,\r\nsin estilos ni Javascript para centrarnos en el tema.\r\n\r\n    django-admin startproject simple_register\r\n\r\n    cd simple_register\r\n\r\nY creamos la **app**\r\n\r\n    ./manage.py startapp simpleregister\r\n\r\n    # Creamos archivos que usaremos mas tarde\r\n    touch simpleregister/{utils,urls,conf,forms}.py\r\n\r\nEn ``simple_register/settings.py`` en ``INSTALLED_APPS``, a\u00f1adimos\r\n``'simpleregister',``.\r\n\r\n    INSTALLED_APPS = [\r\n        # ...\r\n        'simpleregister',\r\n    ]\r\n\r\n En ``simple_register/urls.py`` a\u00f1adimos ``url(),``\r\n\r\n    from django.conf.urls import url, include\r\n    from django.contrib import admin\r\n\r\n    urlpatterns = [\r\n        url(r'^register/', include('simpleregister.urls')),\r\n        url(r'^admin/', admin.site.urls),\r\n    ]\r\n\r\nA\u00f1adir ``, include`` en el ``from import`` de la primera linea\r\n\r\nEditamos ``simpleregister/urls.py``, de momento lo dejamos as\u00ed.\r\n\r\n    from django.conf.urls import url\r\n\r\n    app_name = 'simpleregister'\r\n\r\n    urlpatterns = []\r\n\r\nEditamos ``simpleregister/conf.py`` y de momento solo a\u00f1adimos una linea\r\n\r\n    from django.conf import settings\r\n\r\nAunque podr\u00edamos poner las configuraciones en ``simple_register/settings.py``,\r\ntengo la costumbre de crear un archivo de configuraci\u00f3n por aplicaci\u00f3n y poner\r\nun valor por defecto.\r\n\r\nPor ultimo, vamos a indicar donde estar\u00e1n los templates en\r\n``simple_register/settings.py``. En ``TEMPLATES`` en ``'DIRS': [],``\r\nlo cambiamos por:\r\n\r\n    'DIRS': [os.path.join(BASE_DIR, 'templates')],\r\n\r\ny creamos el directorio\r\n\r\n    mkdir templates\r\n    touch templates/base.html\r\n\r\nA\u00f1adimos en ``templates/base.html``\r\n\r\n    <!DOCTYPE html>\r\n    <html lang=\"es\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Simple Register</title>\r\n    </head>\r\n    <body>\r\n        {% block content %}\r\n        {% endblock content %}\r\n    </body>\r\n    </html>\r\n\r\n## Migraci\u00f3n y crear super usuario\r\n\r\n    ./manage.py migrate\r\n    ./manage.py createsuperuser\r\n\r\nCon esto, ya tenemos la estructura b\u00e1sica para comenzar con la **app**\r\n**simpleregister**",
    "active": true,
    "views": 206,
    "create_at": "2016-08-07T16:06:11.587Z",
    "update_at": "2017-11-21T21:33:40.705Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 38,
  "fields": {
    "title": "Crear Registro con validacion de Email - Parte 2",
    "slug": "crear-registro-con-validacion-de-email-parte-2",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "## Temas\r\n\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-1\">Parte 1 Introduccion</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-2\">Parte 2 Modelo</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-3\">Parte 3 Formularios</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-4\">Parte 4 Vistas</a>\r\n\r\n## El modelo\r\n\r\nSeguimos con el tutorial para crear un registro de usuarios en dos pasos.\r\nEn esta entrada vamos a crear el modelo.\r\n\r\nVamos a crear una tabla separada del modelo ``AUTH_USER_MODEL`` donde se\r\nguardaran usuarios que han echo registro pero aun no han validado la cuenta\r\nemail.\r\n\r\nLos usuarios, se guardara un periodo de **X** d\u00edas.\r\n\r\nEstos son los campos que vamos a crear:\r\n\r\n+   ``username`` Nombre de usuario\r\n+   ``email`` Email\r\n+   ``password`` Contrase\u00f1a\r\n+   ``token`` Token \u00fanico\r\n+   ``date_joined`` Fecha de creaci\u00f3n\r\n\r\n``username``, ``email`` y ``password`` yo creo que casi todos los modelos de\r\nusuario los usan, aunque no se use el que viene por defecto, seguro que esos\r\ntres campos los tiene.\r\n\r\n``token`` sera un **string** generado para identificar al usuario, que estar\u00e1 en\r\nel link generado en el email enviado.\r\n\r\n``date_joined`` para tener el control de cuando un usuario a echo el registro y\r\npoder eliminarlos en caso de expiraci\u00f3n. Un usuario puede hacer el primer paso y\r\nelegir un nombre de usuario, pero si no hace el segundo paso (la validaci\u00f3n),\r\nese nombre de usuario no se podr\u00eda volver a utilizar, en realidad no existir\u00eda\r\ndicho usuario, si no que ademas nadie podr\u00eda usarlo. Por eso necesitamos tener\r\ncontrol de la fecha y si han expirado poder eliminar las filas de la base de\r\ndatos.\r\n\r\nLos datos y validaciones han de ser los mismos que los de Django, ya que una vez\r\nvalidado el token, el usuario se mover\u00e1 a la tabla ``auth_user`` que Django usa\r\npor defecto.\r\n\r\nPrimero, es a\u00f1adir una variable de configuraci\u00f3n con el periodo de expiraci\u00f3n\r\nen d\u00edas.\r\n\r\nEditamos ``simpleregister/conf.py`` y a\u00f1adimos:\r\n\r\n    # Tiempo en d\u00edas antes de expirar el registro temporal.\r\n    SIMPLEREGISTER_EXPIRE_DAYS = getattr(settings, 'SIMPLEREGISTER_EXPIRE_DAYS', 1)\r\n\r\nPor defecto, durara un d\u00eda, pasado el d\u00eda, se eliminara de la base de datos y el\r\nnombre de usuario y email estar\u00e1n libres.\r\n\r\nEn ``simpleregister/models.py`` vamos a aprovechar los mismos par\u00e1metros y\r\nvalidaciones que usa Django por defecto, para ello vamos a copiar algunas\r\nlineas de c\u00f3digo desde GitHub de Django.\r\n\r\n[django/contrib/auth/models.py](https://github.com/django/django/blob/master/django/contrib/auth/models.py)\r\ny [django/contrib/auth/base_user.py](https://github.com/django/django/blob/master/django/contrib/auth/base_user.py)\r\n\r\nLos ``imports``:\r\n\r\n    from django.contrib.auth.password_validation import validate_password\r\n    from django.contrib.auth.validators import ASCIIUsernameValidator\r\n    from django.contrib.auth.validators import UnicodeUsernameValidator\r\n    from django.db import models\r\n    from django.utils import six\r\n    from django.utils import timezone\r\n\r\nAhora creamos el modelo ``SimpleRegisterUser`` y copiamos del modelo de\r\nDjango algunos campos\r\n\r\n    class RegisterUser(models.Model):\r\n        username_validator = UnicodeUsernameValidator() if six.PY3 else ASCIIUsernameValidator()\r\n\r\n        username = models.CharField(\r\n            verbose_name='nombre de usuario',\r\n            max_length=150,\r\n            unique=True,\r\n            validators=[username_validator]\r\n        )\r\n        email = models.EmailField(\r\n            verbose_name='email',\r\n            unique=True\r\n        )\r\n        password = models.CharField(\r\n            verbose_name='password',\r\n            max_length=128,\r\n            validators=[validate_password]\r\n        )\r\n        token = models.CharField(\r\n            verbose_name='token',\r\n            max_length=32\r\n        )\r\n        date_joined = models.DateTimeField(\r\n            verbose_name='date joined',\r\n            default=timezone.now\r\n        )\r\n\r\n        class Meta:\r\n            verbose_name = 'registro usuario temporal'\r\n            verbose_name_plural = 'registro usuarios temporales'\r\n\r\n        def __str__(self):\r\n            return self.email\r\n\r\n``username``, ``email`` y ``date_joined`` son los campos de\r\n[AbstractUser](https://github.com/django/django/blob/master/django/contrib/auth/models.py#L300)\r\ny ``password`` de [AbstractBaseUser](https://github.com/django/django/blob/master/django/contrib/auth/base_user.py#L52).\r\n``token`` es el campo que usaremos para validar los emails.\r\n\r\nAdemas se ha a\u00f1adido la validaci\u00f3n en el ``password``, usara los par\u00e1metros de\r\n``AUTH_PASSWORD_VALIDATORS`` del archivo de ``settings.py``\r\n\r\n``email`` se ha eliminado ``blank=True``, por defecto es ``False``, por lo que\r\nsera un campo obligatorio en los formularios.\r\n\r\n``token`` sera un identificador \u00fanico de 32 caracteres (luego generaremos\r\nel token)\r\n\r\nA parte, se ha a\u00f1adido ``verbose_name`` y ``verbose_name_plural`` en la clase\r\n``Meta`` y en el m\u00e9todo ``__str__`` obtendremos el email.\r\n\r\nYa con esto, tenemos el modelo b\u00e1sico para el usuario de registro. Aun faltan\r\ncosas, pero mas tarde ya volveremos a este modulo.\r\n\r\n## Admin\r\n\r\nEl siguiente paso, podr\u00eda ser el de la administraci\u00f3n, para mostrar los usuarios\r\nque est\u00e1n pendientes de validaci\u00f3n.\r\n\r\nEditamos ``simpleregister/admin.py``\r\n\r\n    from django.contrib import admin\r\n\r\n    from .models import RegisterUser\r\n\r\n\r\n    @admin.register(RegisterUser)\r\n    class RegisterUserAdmin(admin.ModelAdmin):\r\n        list_display = ('email', 'username', 'date_joined')\r\n\r\nVamos hacer una migraci\u00f3n en la base de datos y ver como queda desde la\r\nadministraci\u00f3n.\r\n\r\n    ./manage.py makemigrations simpleregister\r\n    ./manage.py migrate\r\n    ./manage.py runserver\r\n\r\nAbrimos el navegador en [http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)\r\n\r\nVemos que en la 'secci\u00f3n' **SIMPLEREGISTER** esta nuestro modelo\r\n``Registro usuarios temporales``, le damos a ``+ Add`` para ver como ha quedado.\r\n\r\n## Utils\r\n\r\nHasta ahora, tenemos los mas b\u00e1sico de la **app**, que es el modelo pero aun\r\nfaltan cosas como la generaci\u00f3n del **token**. Para generar el token, vamos\r\na\u00f1adir una funci\u00f3n en ``simpleregister/utils.py`` que sera la encargada de\r\ngenerar el token.\r\n\r\n    import uuid\r\n\r\n\r\n    def generate_token():\r\n        \"\"\"Genera un token unico de 32 caracteres.\"\"\"\r\n        return str(uuid.uuid4()).replace('-', '')\r\n\r\nCon esto, nos generara un string aleatorio de 32 caracteres.\r\n\r\nTenemos que volver al modelo, para que cada vez que se crea un nuevo usuario,\r\ngenere un token y ademas que ese token sea \u00fanico.\r\n\r\nPrimero, debemos tener en cuenta que desde la administraci\u00f3n nunca vamos a\r\ncrear un usuario con este sistema, ya que podemos hacerlo directamente\r\ndesde ``auth_user``.\r\n\r\nAhora, en el m\u00e9todo ``save()`` del modelo, cada vez que se crea un usuario\r\nnuevo, creara un token de la siguiente manera\r\n\r\n    # A\u00f1adir el import, en la parte superior\r\n    from .utils import generate_token\r\n\r\n    def save(self, **kwargs):\r\n        if not self.id:\r\n            self.token = self._generate_token()\r\n        return super().save(**kwargs)\r\n\r\n    def _generate_token(self):\r\n        while True:\r\n            token = generate_token()\r\n            if not RegisterUser.objects.filter(token=token):\r\n                return token\r\n\r\nDe esta manera crea un token y se asegura que no existe en la base de datos.\r\n\r\nTambi\u00e9n nos falta la manera de eliminar los registros expirados, para ello,\r\nvamos a crear otro m\u00e9todo en el modelo ``RegisterUser``, primero\r\nimportamos el archivo de configuraci\u00f3n de la app.\r\n\r\n    from . import conf as sregister_conf\r\n\r\ny creamos el m\u00e9todo ``delete_expired_registers``\r\n\r\n    @staticmethod\r\n    def delete_expired_registers():\r\n        \"\"\"Elimina usuarios expirados.\"\"\"\r\n        days = sregister_conf.SIMPLEREGISTER_EXPIRE_DAYS\r\n        diff = timezone.now() - timezone.timedelta(days=days)\r\n        RegisterUser.objects.filter(date_joined__lt=diff).delete()\r\n\r\nEste m\u00e9todo sera llamado desde las vistas antes de llamar al formulario\r\nde registro y antes de validar el token.",
    "active": true,
    "views": 178,
    "create_at": "2016-08-07T16:06:37.597Z",
    "update_at": "2017-11-21T21:34:07.734Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 39,
  "fields": {
    "title": "Crear Registro con validacion de Email - Parte 3",
    "slug": "crear-registro-con-validacion-de-email-parte-3",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "## Temas\r\n\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-1\">Parte 1 Introduccion</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-2\">Parte 2 Modelo</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-3\">Parte 3 Formularios</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-4\">Parte 4 Vistas</a>\r\n\r\nEsta es la tercera parte del tutorial de un registro de usuarios en dos pasos.\r\n\r\nEn la segunda parte del tutorial, hicimos parte del modelo para crear los\r\nusuarios temporales, pero tiene algunos fallos.\r\n\r\nUn fallo es que el ``password`` se guarda en texto plano, algo no muy\r\nrecomendado y otro fallo, es que no esta examinando si el nombre de usuario\r\no email ya existen el la tabla ``auth_user``.\r\n\r\nPara remediar estos dos fallos, vamos a crear un formulario, que sera el que se\r\nmuestre en los templates a los usuarios y a la vez en la administraci\u00f3n.\r\n\r\nEditamos el archivo ``simpleregister/forms.py`` con el siguiente c\u00f3digo.\r\n\r\n    from django import forms\r\n\r\n    from .models import RegisterUser\r\n\r\n\r\n    class RegisterUserForm(forms.ModelForm):\r\n\r\n        password2 = forms.CharField(\r\n            label='Repetir contrase\u00f1a',\r\n            widget=forms.PasswordInput()\r\n        )\r\n\r\n        class Meta:\r\n            model = RegisterUser\r\n            fields = ('username', 'email', 'password')\r\n            widgets = {\r\n                'password': forms.PasswordInput()\r\n            }\r\n\r\nDe esta manera tambi\u00e9n tenemos el campo de repetir contrase\u00f1a y el **widget** de\r\n``password`` pasa a ser ``forms.PasswordInput()``\r\n\r\nAhora para que lo muestre desde la administraci\u00f3n, editamos\r\n``simpleregister/admin.py``\r\n\r\n    # A\u00f1adimos el import del formulario\r\n    from .forms import RegisterUserForm\r\n\r\ny dentro de ``RegisterUserAdmin`` a\u00f1adimos la propiedad ``form``\r\n\r\n    form = RegisterUserForm\r\n\r\nEste formulario sera el que se usara para el registro de usuarios en los\r\ntemplates, as\u00ed que ya lo tenemos echo.\r\n\r\nPero claro, este formulario no valida si ``password`` y ``password2`` son\r\niguales, por lo que vamos a crear un m\u00e9todo ``clean_`` dentro de\r\n``RegisterUserForm`` y a la vez, aprovechamos para encriptar el\r\npassword.\r\n\r\nAl inicio importamos ``make_password`` y ``validate_password``\r\n\r\n    from django.contrib.auth.hashers import make_password\r\n    from django.contrib.auth.password_validation import validate_password\r\n\r\ny creamos los dos siguientes m\u00e9todos de validaci\u00f3n de password\r\n\r\n    def clean_password(self):\r\n        password = self.cleaned_data['password']\r\n        validate_password(password)\r\n        return make_password(password)\r\n\r\n    def clean_password2(self):\r\n        password = self.data['password']\r\n        password2 = self.cleaned_data['password2']\r\n        if password != password2:\r\n            raise forms.ValidationError(\r\n                'Las contrase\u00f1as deben ser iguales'\r\n            )\r\n        return password2\r\n\r\nEl primer metodo ``clean_password``, lo usamos para encritar el password y\r\ncomprobar que sea un password valido seg\u00fan la configuracion\r\n``AUTH_PASSWORD_VALIDATORS`` de ``settings.py``\r\n\r\nSi ``validate_password(password)` falla, lanzara un ``ValidationError``.\r\n\r\nEs en el segundo metodo ``clean_password2`` donde comprobamos que sean iguales,\r\nobtenemos el password en texto plano con ``self.data['password']`` y lo\r\ncomparamos con ``password2``.\r\n\r\nUna vez echo esto, en el modelo podemos eliminar el ``validator`` del campo\r\n``password``, ahora el password esta encriptado, por lo que dudo que alguna vez\r\nencuentre un error de validaci\u00f3n.\r\n\r\n    # Eliminar el import\r\n    from django.contrib.auth.password_validation import validate_password\r\n\r\n    # Eliminar el par\u00e1metro en el campo password\r\n    validators=[validate_password]\r\n\r\nNos queda la \"validaci\u00f3n\" de los campos ``username`` y ``email``, mas que\r\nvalidaci\u00f3n, comprobar que no existan en la tabla de usuarios normal\r\n``auth_user`` (por defecto)\r\n\r\nCrearemos dos m\u00e9todos ``clean_XXXX`` para poder identificar y mostrar el\r\nerror en cada campo.\r\n\r\nPrimero de todo, debemos importar el modelo de usuario usado en el sitio.\r\n\r\n    from django.contrib.auth import get_user_model\r\n\r\ny creamos los dos m\u00e9todos.\r\n\r\n    def clean_username(self):\r\n        username = self.cleaned_data['username']\r\n        if get_user_model().objects.filter(username=username):\r\n            raise forms.ValidationError(\r\n                'Nombre de usuario ya existe'\r\n            )\r\n        return username\r\n\r\n    def clean_email(self):\r\n        email = self.cleaned_data['email']\r\n        if get_user_model().objects.filter(email=email):\r\n            raise forms.ValidationError(\r\n                'Email ya existe'\r\n            )\r\n        return email\r\n\r\nLo \u00fanico que hace, es comprobar que no existan en la tabla de usuarios\r\n``auth_user``, si existe lanza un ``ValidationError``\r\n\r\nAhora ya se ha solucionado el tema de los password en texto plano y no dejamos\r\nregistrar usuarios con un ``username`` o ``email`` ya existentes. Desde el\r\nmodelo se encarga que no existan al ser campos ``unique=True`` y desde la\r\nvalidaci\u00f3n del formulario que no existan en al tabla ``auth_user``.\r\n\r\nAhora faltan los templates para encargarnos de toda la parte de usuario,\r\nincluido el envi\u00f3 del email.",
    "active": true,
    "views": 196,
    "create_at": "2016-08-07T16:07:03.335Z",
    "update_at": "2017-11-21T21:34:21.464Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 40,
  "fields": {
    "title": "Crear Registro con validacion de Email - Parte 4",
    "slug": "crear-registro-con-validacion-de-email-parte-4",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "## Temas\r\n\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-1\">Parte 1 Introduccion</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-2\">Parte 2 Modelo</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-3\">Parte 3 Formularios</a>\r\n*   <a href=\"/blog/article/crear-registro-con-validacion-de-email-parte-4\">Parte 4 Vistas</a>\r\n\r\nHasta ahora, tenemos mucho echo, pero falta la iteraci\u00f3n con el usuario para\r\nque pueda registrarse.\r\n\r\nPara ello vamos a tener que pensar que ``views`` queremos tener.\r\n\r\n1.  Registro de usuario con un formulario.\r\n2.  Informar que todo ha salido bien y que revise el correo.\r\n3.  Validaci\u00f3n del token.\r\n\r\nEditamos ``simpleregister/views.py`` y creamos las tres vistas, con el\r\nm\u00ednimo de datos de momento.\r\n\r\n    from django.views import generic\r\n\r\n    from .forms import RegisterUserForm\r\n    from .models import RegisterUser\r\n\r\n\r\n    class RegisterUserFormView(generic.CreateView):\r\n        model = RegisterUser\r\n        form_class = RegisterUserForm\r\n        template_name = 'simpleregister/register.html'\r\n\r\n\r\n    class RegisterUserSuccessView(generic.TemplateView):\r\n        template_name = 'simpleregister/success.html'\r\n\r\n\r\n    class RegisterUserValidateTokenView(generic.TemplateView):\r\n        template_name = 'simpleregister/validate_token.html'\r\n\r\n``RegisterUserFormView`` Se encarga de mostrar y procesar el formulario.\r\nSi el formulario es valido, redireccionara a ``RegisterUserSuccessView``\r\ninformando de que todo ha salido correctamente y que puede revisar el correo.\r\n\r\nCuando revise el correo, vera un link con un token,\r\n``RegisterUserValidateTokenView``, sera la encargada de comprobar\r\nel token.\r\n\r\nSi el token es valido, se creara un usuario en ``auth_user`` con los datos\r\nya obtenidos. Una vez creado, el usuario temporal sera eliminado.\r\n\r\nAun faltan cosas por hacer en las vistas, que mas adelante se ir\u00e1n haciendo,\r\ncomo el envi\u00f3 del email.\r\n\r\nPor ahora vamos paso a paso. Primero las **urls**, editamos\r\n``simpleregister/urls.py`` y a\u00f1adimos las mas b\u00e1sicas de momento.\r\n\r\n    from django.conf.urls import url\r\n\r\n    from . import views\r\n\r\n    app_name = 'simpleregister'\r\n\r\n    urlpatterns = [\r\n        # /register/\r\n        # Muestra el formulario de registro.\r\n        url(\r\n            regex=r'^$',\r\n            view=views.RegisterUserFormView.as_view(),\r\n            name='register'\r\n        ),\r\n\r\n        # /register/success/\r\n        # El registro ha sido satisfactorio.\r\n        url(\r\n            regex=r'^success/$',\r\n            view=views.RegisterUserSuccessView.as_view(),\r\n            name='success'\r\n        ),\r\n\r\n        # /register/validate/:<str:32>token/\r\n        # Valida un token.\r\n        url(\r\n            regex=r'^validate/(?P<token>[a-z0-9]{30})/$',\r\n            view=views.RegisterUserValidateTokenView.as_view(),\r\n            name='validate_token'\r\n        ),\r\n    ]\r\n\r\nTambi\u00e9n creamos los templates\r\n\r\n    mkdir -p simpleregister/templates/simpleregister\r\n    touch simpleregister/templates/simpleregister/{register,success,validate_token}.html\r\n\r\nEn los tres templates reci\u00e9n creados a\u00f1adimos el ``extends`` y el\r\n``block content``, todos los templates van a ser lo mas simples posibles.\r\n\r\n    {% extends 'base.html' %}\r\n\r\n    {% block content %}\r\n    {% endblock content %}\r\n\r\nVamos a empezar con el formulario de registro.\r\n\r\nEn el template ``register.html`` a\u00f1adimos un simple formulario.\r\n\r\n    {% extends 'base.html' %}\r\n\r\n    {% block content %}\r\n      <form method=\"post\" action=\"\">\r\n        {% csrf_token %}\r\n        {{ form.as_p }}\r\n        <button type=\"submit\">Registro</button>\r\n      </form>\r\n    {% endblock content %}\r\n\r\nSe ve feo de narices, pero funciona!!!\r\n\r\nSi se crea un usuario con datos validos, mostrara el error\r\n``No URL to redirect to ...``. Para ello creamos el m\u00e9todo\r\n``get_success_url()`` en la vista ``RegisterUserFormView``\r\nque redireccionara a la vista ``RegisterUserSuccessView``\r\n\r\n    def get_success_url(self):\r\n        return reverse('simpleregister:success')\r\n\r\nSi se mira desde la administraci\u00f3n, se puede ver como ahora hay un registro\r\ntemporal completado.\r\n\r\nDebemos asegurarnos de que los registros temporales se han eliminado\r\nantes de mostrar el formulario, en el m\u00e9todo ``__init__()``\r\nllamaremos el m\u00e9todo ``RegisterUser.delete_expired_registers``\r\n\r\n    def __init__(self, *args, **kwargs):\r\n            RegisterUser.delete_expired_registers()\r\n            return super().__init__(*args, **kwargs)\r\n\r\nPero no hay se\u00f1al de ning\u00fan email..., vamos a enviar cuando el formulario\r\nsea valido, para ello aprovecharemos el m\u00e9todo ``get_success_url`` que el\r\nobjeto ya se ha creado y podemos obtener el ``token``\r\n\r\nCreamos un directorio de contexto para el email.\r\n\r\n    mkdir simpleregister/templates/simpleregister/emails\r\n    touch simpleregister/templates/simpleregister/emails/register_success.txt\r\n\r\ny a\u00f1adimos en ``register_success.txt`` el contenido del email\r\n\r\n    {{ username }} gracias por registrarte en {{ site_name }}\r\n\r\n    Para completar el registro, simplemente pincha en el siguiente enlace:\r\n\r\n    {{ url_validate_token }}\r\n\r\nLo primero es preparar las variables de contexto para el email. El\r\n{{ username }} se obtiene del formulario, el {{ site_name }} se\r\npodr\u00eda obtener de la app ``sites`` entre otras (pero actualmente no esta\r\ninstalada), pero crearemos una variable con el nombre de un sitio y\r\n{{ url_validate_token }} lo generaremos con ``reverse`` mas el token creado.\r\n\r\nEditamos ``simpleregister/views.py``\r\n\r\nPrimero a\u00f1adimos imports al inicio del archivo\r\n\r\n    from django.conf import settings\r\n    from django.core.mail import send_mail\r\n    from django.template.loader import get_template\r\n\r\ny despu\u00e9s en la vista ``RegisterUserFormView``, a\u00f1adimos\r\n\r\n    def get_success_url(self):\r\n        self._send_email_with_token()\r\n        return reverse('simpleregister:success')\r\n\r\n    def _send_email_with_token(self):\r\n        site_name = 'Simple Register'\r\n        self_object = self.object\r\n        url_validate_token = reverse(\r\n            'simpleregister:validate_token',\r\n            kwargs={'token': self_object.token}\r\n        )\r\n        url_validate_token = '{}://{}{}'.format(\r\n            'https' if self.request.is_secure() else 'http',\r\n            self.request.META['HTTP_HOST'],\r\n            url_validate_token\r\n        )\r\n        context = {\r\n            'username': self_object.username,\r\n            'email': self_object.email,\r\n            'site_name': site_name,\r\n            'url_validate_token': url_validate_token\r\n        }\r\n        email_template = get_template('simpleregister/emails/register_success.txt').render(context)\r\n        send_mail(\r\n            subject='Validaci\u00f3n de email en {}'.format(site_name),\r\n            message=email_template,\r\n            from_email=settings.DEFAULT_FROM_EMAIL,\r\n            recipient_list=[self_object.email]\r\n        )\r\n\r\nNotar que en ``get_success_url`` se ha a\u00f1adido ``self._send_email_with_token()``\r\ny el m\u00e9todo ``_send_email_with_token()`` lo que hace es preparar el contexto,\r\ncargar la plantilla, pero la guardamos en una variable, generamos la ``url``\r\ny mandamos el email con la plantilla ya generada.\r\n\r\nEs necesario configurar un ``SMTP`` en el archivo ``settings.py``\r\n\r\n    DEFAULT_FROM_EMAIL = 'email@example.com'\r\n\r\n    # SMTP configuraci\u00f3n\r\n    EMAIL_USE_TLS = True\r\n    EMAIL_HOST = 'smtp.gmail.com'\r\n    EMAIL_PORT = '587'\r\n    EMAIL_HOST_USER = 'email@gmail.com'\r\n    EMAIL_HOST_PASSWORD = 'password'\r\n\r\nAhora, si se crea un nuevo usuario, ya se registra y se env\u00eda el email\r\ncon el link para la validaci\u00f3n.\r\n\r\nEl siguiente paso es informar al usuario de que el registro se ha\r\ncompletado pero falta un ultimo paso, la validaci\u00f3n del email.\r\n\r\n``simpleregister/templates/simpleregister/success.html``\r\n\r\n    {% extends 'base.html' %}\r\n\r\n    {% block content %}\r\n      <p>\r\n        Registro de usuario se ha realizado correctamente, por favor, revisa tu email\r\n        para poder validarlo.\r\n      </p>\r\n    {% endblock content %}\r\n\r\nSi se accede a la cuenta de email, se podr\u00e1 ver un simple mensaje con el\r\nlink de validaci\u00f3n, pero al pinchar en el, mostrara una pagina en blanco,\r\nque es buena se\u00f1al ya que la ``url`` ha sido generada correctamente.\r\n\r\nAhora nos centraremos en la clase de vista\r\n``RegisterUserValidateTokenView``\r\n\r\nTenemos que comprobar que el token exista en la base de datos y\r\nque no este expirado.\r\n\r\nSi existe, debemos crear un usuario con los datos, si estuviese expirado, se\r\neliminara.\r\n\r\nUna vez lo anterior este correcto, redireccionar a la pagina de login.\r\n\r\nPrimero los imports al inicio en ``simpleregister/views.py``\r\n\r\n    from django.shortcuts import render\r\n    from django.contrib.auth import get_user_model\r\n\r\nCreamos el m\u00e9todo ``get`` en ``RegisterUserValidateTokenView``\r\n\r\n    def get(self, request, *args, **kwargs):\r\n        RegisterUser.delete_expired_registers()\r\n        token = self.kwargs.get('token')\r\n        try:\r\n            user_temp = RegisterUser.objects.get(token=token)\r\n        except RegisterUser.DoesNotExist:\r\n            return render(request, 'simpleregister/token_not_exists.html')\r\n        self._move_user_temp_to_user(user_temp)\r\n        return super().get(request, *args, **kwargs)\r\n\r\nObtenemos el token y comprobamos si existe un usuario con el mismo\r\ntoken, de lo contrario mostramos un mensaje de que el token a caducado\r\no no existe, previamente elimina los usuarios temporales expirados.\r\n\r\nSi existe el token, el m\u00e9todo ``_move_user_temp_to_user``, sera el encargado\r\nde mover al usuario.\r\n\r\n``simpleregister/templates/simpleregister/token_not_exists.html``\r\n\r\n    {% extends 'base.html' %}\r\n\r\n    {% block content %}\r\n      <p>token caducado</p>\r\n    {% endblock content %}\r\n\r\n``simpleregister/views.py``\r\n\r\n    class RegisterUserValidateTokenView(generic.TemplateView):\r\n\r\n        # ...\r\n\r\n        def _move_user_temp_to_user(self, user_temp):\r\n            user_model = get_user_model().objects.create(\r\n                username=user_temp.username,\r\n                email=user_temp.email,\r\n                password=user_temp.password\r\n            )\r\n            if user_model:\r\n                user_temp.delete()\r\n\r\nUsamos el m\u00e9todo ``create`` en vez de ``create_user`` por la contrase\u00f1a,\r\nya que si no, la 're hashearia :S (sry por el palabro)' otra vez.\r\n\r\nSe puede ver, si pinchamos desde el email que mostrara\r\n``Registro de usuario se ha realizado correctamente ...`` y si\r\nse actualiza de nuevo la pagina, mostrara ``token caducado``\r\npor que ya no existe el token en la base de datos.\r\n\r\nSi se mira desde [http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin)\r\nse puede ver que el usuario se ha movido como un usuario final.\r\n\r\nPues con esto ya esta terminado, es posible mejorarlo pero eso ya es a\r\ngusto del consumidor.\r\n\r\nEn los prosimos dias, hare un tutorial para hacer login.",
    "active": true,
    "views": 176,
    "create_at": "2016-08-07T16:07:26.467Z",
    "update_at": "2017-11-21T21:33:20.309Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 41,
  "fields": {
    "title": "Tutorial login en Django",
    "slug": "tutorial-login-en-django",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Hace unos d\u00edas, hice un peque\u00f1o tutorial para un registro en dos pasos con Django. En esta ocasi\u00f3n\r\nvamos a hacer otro de un simple login.\r\n\r\nSe va a utilizar parte del las vistas de autenticaci\u00f3n de Django, modificando algunas de ellas.\r\n\r\nEsto es lo que se podr\u00e1 hacer una vez acabemos con el tutorial.\r\n\r\n*   Login.\r\n*   Logout.\r\n*   Contrase\u00f1a olvidada, recuperarla.\r\n*   Cambiar contrase\u00f1a actual.\r\n\r\n## Creaci\u00f3n del proyecto\r\n\r\nEmpezamos creando el proyecto, en esta ocasi\u00f3n vamos a usar\r\n[django-boilerplate](https://github.com/snicoper/django-boilerplate) por lo que usaremos\r\n[Materializecss](http://materializecss.com/) para el **CSS**.\r\n\r\nNos desplazamos a un directorio para crear el proyecto, con virtualenv o virtualenvwrapper\r\ndebemos tener instalado al menos Django.\r\n\r\n    # usando virtualenv o virtualenvwrapper\r\n    # workon my_env o source /path/env/bin/activate\r\n\r\n    django-admin.py startproject --template=https://github.com/snicoper/django-boilerplate/archive/master.zip simplelogin\r\n    cd simplelogin/\r\n\r\nSi usas **\\*NIX** dar permisos de ejecuci\u00f3n a ``manage.py``:\r\n\r\n    chmod +x manage.py\r\n\r\nY los paquetes pip necesarios.\r\n\r\n    pip install -r requirements/local.txt\r\n\r\nVamos a quitar algunas cosillas primero\r\n\r\nEditamos ``src/apps/home/views.py`` y lo dejamos as\u00ed:\r\n\r\n    from django.views import generic\r\n\r\n\r\n    class IndexView(generic.TemplateView):\r\n        template_name = 'home/index.html'\r\n\r\n## Migraci\u00f3n y s\u00faper usuario\r\n\r\nCreamos una migraci\u00f3n y el s\u00faper usuario (usa SQLite por defecto)\r\n\r\n    ./manage.py makemigrations\r\n    ./manage.py migrate\r\n    ./manage.py createsuperuser\r\n    ./manage.py runserver\r\n\r\nDe momento, tenemos un simple proyecto Django, vamos a usar la **app** ``accounts`` para crear una\r\nvista que requiera de login.\r\n\r\n    touch src/apps/accounts/{views,urls}.py\r\n\r\ny a\u00f1adimos en ``src/apps/accounts/views.py`` una simple vista:\r\n\r\n    from django.views import generic\r\n    from django.contrib.auth.mixins import LoginRequiredMixin\r\n\r\n\r\n    class UserProfileView(LoginRequiredMixin, generic.TemplateView):\r\n        template_name = 'accounts/profile.html'\r\n\r\nCon el **mixin** ``LoginRequiredMixin`` ya no se podr\u00e1 acceder si no esta logueado. Cuando se\r\nintenta acceder a una zona que requiere de login, Django redirecciona al valor de\r\n``settings.LOGIN_URL``.\r\n\r\nAhora creamos el template.\r\n\r\n    mkdir src/templates/accounts\r\n    touch src/templates/accounts/profile.html\r\n\r\ny a\u00f1adimos en ``src/templates/accounts/profile.html``:\r\n\r\n    {% extends 'base.html' %}\r\n\r\n    {% block content %}\r\n      <h1>User Profile</h1>\r\n    {% endblock content %}\r\n\r\nVamos a a\u00f1adir la **url** para que podamos acceder al **profile**, en ``src/apps/accounts/urls.py``.\r\n\r\n    from django.conf.urls import url\r\n\r\n    from . import views\r\n\r\n    app_name = 'accounts'\r\n\r\n    urlpatterns = [\r\n        # /accounts/profile/\r\n        # Perfil privado de usuario\r\n        url(\r\n            regex=r'^profile/$',\r\n            view=views.UserProfileView.as_view(),\r\n            name='profile'\r\n        ),\r\n    ]\r\n\r\nY tenemos que incluir las urls de accounts al **URLConf** principal, editando ``src/config/urls.py``\r\na\u00f1adimos dentro de ``urlpatterns``:\r\n\r\n    urlpatterns = [\r\n        # ...\r\n\r\n        # /accounts/*\r\n        url(r'^accounts/', include('accounts.urls')),\r\n    ]\r\n\r\nSi intentamos acceder a [http://127.0.0.1:8000/accounts/profile/](http://127.0.0.1:8000/accounts/profile/)\r\nmostrara un **Page not found (404)** y eso esta perfecto! por que un poco mas abajo dice\r\n**Request URL: \thttp://127.0.0.1:8000/accounts/login/?next=/accounts/profile/**.\r\n\r\nEso quiere decir que nos ha redireccionado a ``settings.LOGIN_URL`` que por defecto es ``accounts/login``\r\nya que no tenemos acceso al **profile** sin autenticaci\u00f3n.\r\n\r\nA\u00f1adimos otra url en ``src/config/urls.py``\r\n\r\n    urlpatterns = [\r\n        # ...\r\n\r\n        # /accounts/*\r\n        url(r'^accounts/', include('accounts.urls')),\r\n\r\n        # A\u00f1adimos tambien las urls de autenticacion de Django\r\n        url(r'^accounts/', include('django.contrib.auth.urls')),\r\n    ]\r\n\r\n## Login\r\n\r\nVamos a copiar los templates de Django que est\u00e1n en ``$VIRTUAL_ENV/lib/python3.5/site-packages/django/contrib/admin/templates/registration`` y las\r\npegamos en ``src/templates/registration``\r\n\r\nCambiar ``python3.5`` por el python que est\u00e9s usando.\r\n\r\n    mkdir src/templates/registration\r\n    cp $VIRTUAL_ENV/lib/python3.5/site-packages/django/contrib/admin/templates/registration/* src/templates/registration/\r\n    cp $VIRTUAL_ENV/lib/python3.5/site-packages/django/contrib/admin/templates/admin/login.html src/templates/registration/\r\n\r\n<div class=\"alert alert-info\">\r\n  Parece que\r\n  <a href=\"https://github.com/django/django/blob/master/django/contrib/auth/views.py#L56\">Django 1.11</a>\r\n  a\u00f1adir\u00e1 CBV para estas tareas.<br>\r\n  <a href=\"https://docs.djangoproject.com/en/dev/releases/1.11/#django-contrib-auth\">Leer las notas de 1.11</a><br>\r\n\r\n  Ademas las <code>FBV</code> <code>login</code>, <code>logout</code> quedaran <strong>deprecated</strong>\r\n</div>\r\n\r\nOtra manera que se puede hacer es poner urls para cada vista, pero personalmente me terminan\r\nrallando mucho, sobre todo las mas complejas (login, logout no dan ning\u00fan problema).\r\n\r\n``src/apps/accounts/urls.py``.\r\n\r\n    from django.contrib.auth import views as auth_views\r\n\r\n    urlpatterns = [\r\n        # ...\r\n\r\n        # /accounts/login/\r\n        # Formulario de login.\r\n        url(\r\n            regex=r'^login/$',\r\n            view=auth_views.login,\r\n            name='login',\r\n            kwargs={'template_name': 'accounts/login.html'}\r\n        ),\r\n    ]\r\n\r\nPrefiero modificar los templates. Con Django 1.11 y la herencia de las CBV seguro que mejorara\r\ntodo esto.\r\n\r\nSi se actualiza se puede ver que muestra el formulario de login. Es el mismo que el de la administraci\u00f3n,\r\npero se puede modificar editando los archivos ``src/templates/registration/*.html``\r\n\r\n## Logout\r\n\r\nA partir de ahora, vamos a ir un poco mas directos, ya que los fundamentos ya los sabemos.\r\n\r\nLogout es aun mas simple, solo tenemos que a\u00f1adir una url ``{% url 'logout' %}`` a un enlace.\r\n\r\nA\u00f1adimos en ``src/templates/accounts/profile.html`` un link para hacer Logout\r\n\r\n    <a href=\"{% url 'logout' %}\">Logout</a>\r\n\r\nPuedes ahora modificar ``src/templates/registration/logged_out.html`` con otro mensaje.\r\n\r\n# Recuperar contrase\u00f1a\r\n\r\n<div class=\"alert alert-warning\">\r\n  A partir de ahora, algunas funciones como recuperar contrase\u00f1a requiere de la configuraci\u00f3n\r\n  de un <a href=\"https://docs.djangoproject.com/es/1.10/ref/settings/#email-host\">SMTP</a>\r\n</div>\r\n\r\nA\u00f1adir al final del archivo ``src/config/settings/base.py`` la configuraci\u00f3n del **SMTP**\r\n\r\n    # Configuraci\u00f3n SMTP\r\n    EMAIL_USE_TLS = True\r\n    EMAIL_HOST = 'smtp.gmail.com'\r\n    EMAIL_PORT = 587\r\n    EMAIL_HOST_USER = 'user@gmail.com'\r\n    EMAIL_HOST_PASSWORD = 'password_gmail'\r\n\r\nEn el link [http://127.0.0.1:8000/accounts/password_reset/](http://127.0.0.1:8000/accounts/password_reset/)\r\nse podr\u00e1 recuperar la contrase\u00f1a.\r\n\r\nLos datos del dominio y nombre de sitio, los obtiene de la app **Sites**, para cambiar los datos\r\n[http://127.0.0.1:8000/admin/sites/site/1/change/](http://127.0.0.1:8000/admin/sites/site/1/change/)\r\n\r\n# Cambio de contrase\u00f1a\r\n\r\nSimplemente siguiendo los pasos [http://127.0.0.1:8000/accounts/password_change/](http://127.0.0.1:8000/accounts/password_change/) (Requiere login)\r\n\r\nPues ya esta, con esto se hace un simple login, recuperar la contrase\u00f1a y cambiarla. Lo \u00fanico que\r\nhar\u00eda falta ahora es modificar los templates.\r\n\r\nEspero que les haya sido \u00fatil.",
    "active": true,
    "views": 216,
    "create_at": "2016-08-08T23:57:10.052Z",
    "update_at": "2017-01-19T02:00:49.142Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 42,
  "fields": {
    "title": "Django login con username o email",
    "slug": "django-login-con-username-o-email",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Con este peque\u00f1o tip, vamos a permitir que un usuario pueda loguearse poniendo el email\r\ny/o username y contrase\u00f1a.\r\n\r\nEn el archivo de configuraci\u00f3n ``settings.py`` vamos a crear una variable ``AUTH_AUTHENTICATION_TYPE``\r\ncon uno de los siguientes valores: ``both``, ``email``, ``username``.\r\n\r\nAdemas, tenemos que cambiar el valor de ``AUTHENTICATION_BACKENDS``. El valor es una lista o tupla\r\ncon los **backends** de autenticaci\u00f3n, valga la redundancia.\r\n\r\n``settings.py``\r\n\r\n    AUTH_AUTHENTICATION_TYPE = 'both'\r\n\r\n    AUTHENTICATION_BACKENDS = (\r\n        'accounts.backends.EmailOrUsernameModelBackend',\r\n    )\r\n\r\nSe entiende que tenemos la app ``accounts`` y dentro de ella, creamos el archivo ``backends.py``.\r\n\r\nDentro de ``backends.py`` a\u00f1adimos:\r\n\r\n    from django.conf import settings\r\n    from django.contrib.auth import get_user_model\r\n    from django.contrib.auth.backends import ModelBackend\r\n    from django.db.models import Q\r\n\r\n\r\n    class EmailOrUsernameModelBackend(ModelBackend):\r\n\r\n        def authenticate(self, username=None, password=None):\r\n            auth_type = settings.AUTH_AUTHENTICATION_TYPE\r\n            if auth_type == 'username':\r\n                return super().authenticate(username, password)\r\n            user_model = get_user_model()\r\n            try:\r\n                if auth_type == 'both':\r\n                    user = user_model.objects.get(\r\n                        Q(username__iexact=username) | Q(email__iexact=username)\r\n                    )\r\n                else:\r\n                    user = user_model.objects.get(email__iexact=username)\r\n                if user.check_password(password):\r\n                    return user\r\n            except user_model.DoesNotExist:\r\n                return None\r\n\r\nAhora iniciando el servidor, puedes jugar un poco y ver los resultados\r\n[http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)",
    "active": true,
    "views": 203,
    "create_at": "2016-08-09T03:16:42.068Z",
    "update_at": "2017-01-19T02:00:49.124Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.article",
  "pk": 45,
  "fields": {
    "title": "Ultima version de PostgreSQL en Centos 7",
    "slug": "ultima-version-de-postgresql-en-centos-7",
    "owner": 1,
    "default_tag": 3,
    "image_header": "articles/headers/servers.png",
    "body": "Es posible tener una de las ultimas versiones de [PostgreSQL](https://www.postgresql.org/) en\r\nCentos 7, para ello deberemos usar uno de los\r\n[repos](https://www.postgresql.org/download/linux/redhat/).\r\n\r\nPara la instalaci\u00f3n de **PostgreSQL 9.6.3** en Centos 7, seria la siguiente.\r\n\r\nInstalaci\u00f3n del repositorios.\r\n\r\n```bash\r\nyum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm\r\n```\r\n\r\nInstalaci\u00f3n de ``postgresql``, ``devel`` y ``contrib``\r\n\r\n```bash\r\nyum install postgresql96 postgresql96-server postgresql96-devel postgresql96-contrib\r\n```\r\n\r\nSi se quiere instalar **Postgis**\r\n\r\n```bash\r\nyum install postgis2_96\r\n```\r\n\r\nA\u00f1adir al ``PATH``\r\n\r\n```bash\r\nvim /etc/profile\r\n\r\nexport PATH=\"$PATH:/usr/pgsql-9.6/bin/\"\r\n```\r\n\r\nEs necesario reiniciar el PC.\r\n\r\nInicializaci\u00f3n\r\n\r\n```bash\r\npostgresql96-setup initdb\r\nsystemctl start postgresql-9.6\r\nsystemctl enable postgresql-9.6\r\n\r\n# A\u00f1adir contrase\u00f1a a postgres.\r\nsu - postgres\r\npsql\r\n\\password postgres\r\n\\q\r\nexit\r\n```\r\n\r\nLos archivos de configuraci\u00f3n est\u00e1n en ``/var/lib/pgsql/9.6/data/``\r\n\r\n```bash\r\nvim /var/lib/pgsql/9.6/data/postgresql.conf\r\nvim /var/lib/pgsql/9.6/data/pg_hba.conf\r\n```",
    "active": true,
    "views": 35,
    "create_at": "2017-11-11T15:20:50.352Z",
    "update_at": "2017-11-11T15:51:38.422Z",
    "tags": [
      2,
      1,
      3
    ]
  }
},
{
  "model": "blog.article",
  "pk": 55,
  "fields": {
    "title": "Python 3 en Centos 7",
    "slug": "python-3-en-centos-7",
    "owner": 1,
    "default_tag": 5,
    "image_header": "articles/headers/code_python.png",
    "body": "Estas son las formas que he encontrado para tener una versi\u00f3n de Python 3.x\r\n\r\n* Compilando fuentes\r\n* Repos [iuscommunity](https://ius.io/)\r\n* [Software collections](https://www.softwarecollections.org/en/)\r\n* Repos Epel (Python 3.4 a la hora de escribir este articulo)\r\n\r\n## Compilando fuentes\r\n\r\n```bash\r\nyum install yum-utils\r\n\r\nyum groupinstall -y \"development tools\"\r\n\r\nsudo yum install \\\r\n    zlib-devel \\\r\n    bzip2-devel \\\r\n    openssl-devel \\\r\n    ncurses-devel \\\r\n    sqlite-devel \\\r\n    readline-devel \\\r\n    tk-devel \\\r\n    gdbm-devel \\\r\n    db4-devel \\\r\n    libpcap-devel \\\r\n    xz-devel\r\n```\r\n\r\n```bash\r\nsudo echo \"/usr/local/lib\" >> /etc/ld.so.conf\r\n```\r\n\r\nDescargar las fuentes, compilar e instalar.\r\n\r\n```bash\r\nwget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz\r\ntar -zxvf Python-3.6.3.tgz\r\ncd Python-3.6.3\r\n\r\n./configure --prefix=/usr/local --enable-shared LDFLAGS=\"-Wl,-rpath /usr/local/lib\"\r\nmake\r\nsudo make altinstall\r\n```\r\n\r\n## iuscommunity\r\n\r\nEsta es la que utilizo en Centos para tener Python 3.6.\r\n\r\n```bash\r\nyum -y install yum-utils\r\n```\r\n\r\n```bash\r\nyum -y install https://centos7.iuscommunity.org/ius-release.rpm\r\nyum -y install python36u python36u-pip python36u-devel\r\n```\r\n\r\n## Software collections\r\n\r\nDe esta forma, yo no he conseguido tener **Virtualenvwrapper**, aunque quiz\u00e1 en un servidor de\r\nproducci\u00f3n no importe mucho. De todas foras aqu\u00ed la dejo \ud83d\ude0e\r\n\r\n```bash\r\nyum install centos-release-scl\r\nyum-config-manager --enable rhel-server-rhscl-7-rpms\r\nyum install rh-python36\r\nscl enable rh-python36 bash\r\n```\r\n\r\n## Python 3.4 Epel\r\n\r\nDe esta forma es posible tener Python 3, pero la version ``3.4.x``\r\n\r\n```bash\r\nyum install epel-release\r\n\r\nyum install python34 python34-setuptools python34-devel redhat-rpm-config\r\n\r\ncurl https://bootstrap.pypa.io/get-pip.py | python3.4\r\n```\r\n\r\n## Virtualenvwrapper\r\n\r\nPara todas las anteriores, menos para **Software collections** que como he dicho,\r\nno lo he conseguido.\r\n\r\nComo usuario.\r\n\r\n```bash\r\npip3.6 install --user virtualenvwrapper\r\n```\r\n\r\nEditar ``~/.bashrc`` o ``~/.zshrc``\r\n\r\n```bash\r\n# Virtualenvwrapper\r\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\r\nexport WORKON_HOME=$HOME/.virtualenvs\r\nsource ~/.local/bin/virtualenvwrapper.sh\r\n```\r\n\r\nPara obtener los **PATHs**\r\n\r\n```bash\r\nwhich python3.6\r\nwhich virtualenvwrapper.sh\r\n```\r\n\r\nRecargar ``~/.bashrc`` o ``~/.zshrc``.\r\n\r\n```bash\r\n# bash\r\nsource ~/.bashrc\r\n\r\n# zsh\r\nsource ~/.zshrc\r\n```\r\n\r\n## Comandos virtualenvwrapper\r\n\r\n* ``mkvirtualenv`` Crea un nuevo virtualenv\r\n* ``rmvirtualenv`` Elimina un virtualenv existente\r\n* ``workon`` Cambia el actual virtualenv\r\n* ``deactivate`` Desactivar virtualenv\r\n* ``lsvirtualenv`` Listar virtualenvs",
    "active": true,
    "views": 39,
    "create_at": "2017-11-11T16:41:10.843Z",
    "update_at": "2017-11-11T16:41:10.843Z",
    "tags": [
      1,
      5
    ]
  }
},
{
  "model": "blog.article",
  "pk": 66,
  "fields": {
    "title": "Instalaci\u00f3n dotnet core en Fedora/Centos",
    "slug": "instalacion-dotnet-core-en-fedoracentos",
    "owner": 1,
    "default_tag": 20,
    "image_header": "articles/headers/art_dotnet_fedora.png",
    "body": "B\u00e1sicamente la instalaci\u00f3n es la misma.\r\n\r\n## Fedora > 25\r\n\r\nA\u00f1adir repos de **dotnet**\r\n\r\n```bash\r\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\r\nsudo sh -c 'echo -e \"[packages-microsoft-com-prod]\\nname=packages-microsoft-com-prod \\nbaseurl=https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/dotnetdev.repo'\r\n```\r\n\r\nInstalar **.NET SDK**\r\n\r\n```bash\r\nsudo dnf update\r\nsudo dnf install libunwind libicu compat-openssl10\r\nsudo dnf install dotnet-sdk-2.0.3\r\n```\r\n\r\n## Centos 7\r\n\r\nA\u00f1adir repos de **dotnet**\r\n\r\n```bash\r\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\r\nsudo sh -c 'echo -e \"[packages-microsoft-com-prod]\\nname=packages-microsoft-com-prod \\nbaseurl= https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/dotnetdev.repo'\r\n```\r\n\r\nInstalar **.NET SDK**\r\n\r\n```bash\r\nsudo yum update\r\nsudo yum install libunwind libicu\r\nsudo yum install dotnet-sdk-2.0.2\r\n```\r\n\r\n## Creaci\u00f3n app\r\n\r\n```bash\r\ndotnet new -l\r\n```\r\n\r\nMuestra un listado de **Templates** para usar con ``dotnet new``\r\n\r\n```bash\r\nTemplates                                         Short Name       Language          Tags\r\n--------------------------------------------------------------------------------------------------------\r\nConsole Application                               console          [C#], F#, VB      Common/Console\r\nClass library                                     classlib         [C#], F#, VB      Common/Library\r\nUnit Test Project                                 mstest           [C#], F#, VB      Test/MSTest\r\nxUnit Test Project                                xunit            [C#], F#, VB      Test/xUnit\r\nASP.NET Core Empty                                web              [C#], F#          Web/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc              [C#], F#          Web/MVC\r\nASP.NET Core Web App                              razor            [C#]              Web/MVC/Razor Pages\r\nASP.NET Core with Angular                         angular          [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js                        react            [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js and Redux              reactredux       [C#]              Web/MVC/SPA\r\nASP.NET Core Web API                              webapi           [C#], F#          Web/WebAPI\r\nglobal.json file                                  globaljson                         Config\r\nNuget Config                                      nugetconfig                        Config\r\nWeb Config                                        webconfig                          Config\r\nSolution File                                     sln                                Solution\r\nRazor Page                                        page                               Web/ASP.NET\r\nMVC ViewImports                                   viewimports                        Web/ASP.NET\r\nMVC ViewStart                                     viewstart                          Web/ASP.NET\r\n```\r\n\r\n-----\r\n\r\n**Fuentes**\r\n\r\n* https://www.microsoft.com/net/learn/get-started/linuxredhat",
    "active": true,
    "views": 40,
    "create_at": "2017-11-16T21:48:09.862Z",
    "update_at": "2017-11-16T21:49:10.386Z",
    "tags": [
      1,
      20
    ]
  }
},
{
  "model": "blog.article",
  "pk": 80,
  "fields": {
    "title": "Paginaci\u00f3n mejorada con Django",
    "slug": "paginacion-mejorada-con-django",
    "owner": 1,
    "default_tag": 2,
    "image_header": "",
    "body": "Hace tiempo escrib\u00ed una peque\u00f1a [entrada](/blog/article/django-paginacion-en-cbv/)\r\nde paginaci\u00f3n con Django. Hoy es la misma paginaci\u00f3n pero mejorada.\r\n\r\nLo primero es crear un un `simple_tag` dentro de `templatetags/xxx_tags.py`, en mi caso, siempre\r\ntengo una **app** `utils` para este tipo de cosas globales. Por lo tanto, dentro de `utils/templatetags/utils_tags.py`\r\ncreamos nuestra `simple_tag`.\r\n\r\n```python\r\n@register.simple_tag(name='pagination')\r\ndef pagination(page_obj):\r\n    initial = 1\r\n    radius = 3\r\n    pages = radius * 2 + 1\r\n    num_pages = page_obj.paginator.num_pages\r\n    last = pages if num_pages > pages else num_pages\r\n    if page_obj.number > (radius + 1):\r\n        initial = page_obj.number - radius\r\n        if num_pages > page_obj.number + radius:\r\n            last = page_obj.number + radius\r\n        else:\r\n            last = num_pages\r\n    context = {\r\n        'initial': initial,\r\n        'last': last,\r\n        'num_pages': num_pages,\r\n        'current': page_obj.number,\r\n        'range': range(initial, last + 1),\r\n        'has_pagination': True if num_pages > 1 else False\r\n    }\r\n    return context\r\n```\r\n\r\nSe le pasa el objeto `Page` con el nombre `page_obj` que Django a\u00f1ade en el `context` de los\r\n**Templates** al menos con `CBV`, con `FBV` \u00bfUn objeto `Paginator`?\r\n\r\nSe hace algunos c\u00e1lculos sobre `page_obj`, se construye un contexto para luego manejar\r\ndesde el template.\r\n\r\nAhora, en la ra\u00edz del directorio `templates`, creamos `_pagination.html` con el siguiente contenido.\r\n\r\n```html\r\n{% load utils_tags %}\r\n\r\n{% pagination page_obj as paginator %}\r\n{% if paginator.has_pagination == True %}\r\n  <section class=\"row\">\r\n    <div class=\"col-12\">\r\n      <ul class=\"pagination justify-content-center\">\r\n        {% if paginator.current == 1 %}\r\n          <li class=\"page-item disabled\">\r\n            <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n              <span class=\"sr-only\">Previous</span>\r\n            </a>\r\n          </li>\r\n        {% else %}\r\n          <li class=\"page-item\">\r\n            <a class=\"page-link\" href=\"?page=1\" aria-label=\"Previous\">\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n              <span class=\"sr-only\">Previous</span>\r\n            </a>\r\n          </li>\r\n        {% endif %}\r\n\r\n        {% for page in paginator.range %}\r\n          <li class=\"page-item{% if paginator.current == page %} active{% endif %}\">\r\n            <a class=\"page-link\" href=\"?page={{ page }}\">\r\n              {{ page }}\r\n            </a>\r\n          </li>\r\n        {% endfor %}\r\n\r\n        {% if paginator.current == paginator.num_pages %}\r\n          <li class=\"page-item disabled\">\r\n            <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n              <span class=\"sr-only\">Next</span>\r\n            </a>\r\n          </li>\r\n        {% else %}\r\n          <li class=\"page-item\">\r\n            <a class=\"page-link\" href=\"?page={{ paginator.num_pages }}\" aria-label=\"Next\">\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n              <span class=\"sr-only\">Next</span>\r\n            </a>\r\n          </li>\r\n        {% endif %}\r\n      </ul>\r\n    </div>\r\n  </section>\r\n{% endif %}\r\n```\r\n\r\nPor ultimo, desde una `ListView` se llama, de la siguiente manera.\r\n\r\n```html\r\n{% include \"_pagination.html\" %}\r\n```\r\n\r\nCon esto ya se tiene una paginaci\u00f3n global para cada vez que haga falta \ud83d\ude1c.\r\n\r\n<div class=\"text-center my-2\">\r\n  <img src=\"/static/dist/img/articles/pagination.png\" alt=\"pagination\">\r\n</div>\r\n\r\nAhora el \u00fanico problema a solucionar, es cuando hayan **query string** en la **URI**, eso para\r\nla proxima!.",
    "active": true,
    "views": 26,
    "create_at": "2017-11-18T18:36:37.191Z",
    "update_at": "2017-11-19T06:53:52.108Z",
    "tags": [
      2
    ]
  }
},
{
  "model": "blog.articlesubscribe",
  "pk": 1,
  "fields": {
    "email": "snicoper@gmail.com",
    "token_unsigned": "8de587ab2e8fe1db16b64729fcf21e"
  }
},
{
  "model": "blog.articlerate",
  "pk": 80,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 66,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 55,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 45,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 42,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 41,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 40,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 39,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 38,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 37,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 36,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 35,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 33,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 32,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 31,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 30,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 29,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 28,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 27,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 26,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 25,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 24,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 23,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 22,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 21,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 20,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 19,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 18,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 17,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 16,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 15,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 14,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 13,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 12,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 10,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 11,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 9,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 8,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 7,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 6,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 5,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 4,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 3,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 2,
  "fields": {
    "positives": 0
  }
},
{
  "model": "blog.articlerate",
  "pk": 1,
  "fields": {
    "positives": 0
  }
}
]
